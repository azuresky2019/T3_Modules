<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\T3_6cta_REV1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\T3_6cta_REV1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Wed Jun 07 14:57:17 2017
<BR><P>
<H3>Maximum Stack Usage =       1120 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
vNETTask &rArr; uip_polling &rArr; uip_process &rArr; udp_appcall &rArr; UDP_bacnet_APP &rArr; npdu_handler &rArr; apdu_handler &rArr; handler_write_property &rArr; Analog_Output_Write_Property &rArr; Analog_Output_Present_Value_Set &rArr; wirte_bacnet_value_to_buf &rArr; tapdev_init &rArr; ENC28J60_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[3a0]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[20]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC1_2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3d]">ADC3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[23]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[24]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[19]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[46]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[47]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[48]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[49]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[14]">EXTI0_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[36]">EXTI15_10_IRQHandler</a> from rfm69.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[15]">EXTI1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[16]">EXTI2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[17]">EXTI3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[18]">EXTI4_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[25]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[12]">FLASH_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3e]">FSMC_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[2e]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[2d]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[30]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[2f]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[f]">PVD_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[13]">RCC_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[37]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[11]">RTC_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3f]">SDIO_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[31]">SPI1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[32]">SPI2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[41]">SPI3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4f]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_xl.o(.text)
 <LI><a href="#[10]">TAMPER_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[26]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[29]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[28]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[27]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[2a]">TIM2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[2b]">TIM3_IRQHandler</a> from timerx.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[2c]">TIM4_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[40]">TIM5_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[44]">TIM6_IRQHandler</a> from timerx.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[45]">TIM7_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[39]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3c]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3b]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3a]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[42]">UART4_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[43]">UART5_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[33]">USART1_IRQHandler</a> from modbus.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[34]">USART2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[35]">USART3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[38]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[21]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[22]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[e]">WWDG_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[5a]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_xl.o(.text)
 <LI><a href="#[55]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[56]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[54]">_sbackspace</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[58]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[53]">_sgetc</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[52]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[57]">fputc</a> from usart.o(.text) referenced from _printf_char_file.o(.text)
 <LI><a href="#[59]">isspace</a> from isspace.o(.text) referenced 2 times from scanf_char.o(.text)
 <LI><a href="#[51]">prvIdleTask</a> from tasks.o(.text) referenced from tasks.o(.text)
 <LI><a href="#[85]">vAcceleroTask</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[4c]">vCOMMTask</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[83]">vGetACTask</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[4a]">vINPUTSTask</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[95]">vKEYTask</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[4b]">vLED0Task</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[4e]">vMSTP_TASK</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[4d]">vNETTask</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[98]">vOUTPUTSTask</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[a]">vPortSVCHandler</a> from port.o(.emb_text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[8a]">vRFMTask</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[b0]">vSTORE_EEPTask</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[c]">xPortPendSVHandler</a> from port.o(.emb_text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[d]">xPortSysTickHandler</a> from port.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5a]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5b]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[5d]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[3d6]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3d7]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3d8]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[3d9]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[3da]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[5e]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[387]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[60]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[61]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[3db]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[72]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[3dc]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[3dd]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[3de]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[3df]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[3e0]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[3e1]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[3e2]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[3e3]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[3e4]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[3e5]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[63]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[3e6]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[65]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[3e7]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[3e8]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[67]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[3e9]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[3ea]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[68]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[3eb]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[3ec]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[3ed]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[3ee]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[3ef]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[3f0]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[3f1]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[3f2]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[3f3]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[3f4]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[3f5]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[3f6]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[3f7]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[5c]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[3f8]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[6a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[6c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[3f9]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[6e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; mass_flash_init &rArr; iap_write_appbin &rArr; STMFLASH_Write_NoCheck &rArr; STMFLASH_WriteHalfWord &rArr; STMFLASH_WaitDone &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3fa]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[3a8]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[71]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[3fb]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[73]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[a]"></a>vPortSVCHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[173]"></a>vPortStartFirstTask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[c]"></a>xPortPendSVHandler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>vPortSetInterruptMask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vINPUTSTask
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEndScheduler
</UL>

<P><STRONG><a name="[16b]"></a>vPortClearInterruptMask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
</UL>

<P><STRONG><a name="[1ca]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkData
</UL>

<P><STRONG><a name="[79]"></a>Inital_Bacnet_Server</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Inital_Bacnet_Server &rArr; address_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_set_broadcast_addr
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Set_Object_Instance_Number
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internalDeal
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSTP_TASK
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_bacnet_value_to_buf
</UL>

<P><STRONG><a name="[83]"></a>vGetACTask</STRONG> (Thumb, 306 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vGetACTask &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_getChannal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[85]"></a>vAcceleroTask</STRONG> (Thumb, 198 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vAcceleroTask &rArr; ACCELERO_Read_Data &rArr; ACCELERO_I2C_read_byte &rArr; ACCELERO_I2C_NAck &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_Write_Data
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_Read_Data
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_IO_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[90]"></a>rfm69_checkData</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRFMTask
</UL>

<P><STRONG><a name="[8a]"></a>vRFMTask</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = vRFMTask &rArr; responseCmd &rArr; ACCELERO_Read_Data &rArr; ACCELERO_I2C_read_byte &rArr; ACCELERO_I2C_NAck &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseCmd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internalDeal
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_crc16
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setMode
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_sendWithRetry
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_initialize
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_encrypt
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_TIMER_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_GPIO_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfm69_checkData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[95]"></a>vKEYTask</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vKEYTask &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Status_Scan
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_IO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[98]"></a>vOUTPUTSTask</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vOUTPUTSTask &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_refresh
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[9c]"></a>uip_polling</STRONG> (Thumb, 386 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
<LI>Call Chain = uip_polling &rArr; uip_process &rArr; udp_appcall &rArr; UDP_bacnet_APP &rArr; npdu_handler &rArr; apdu_handler &rArr; handler_write_property &rArr; Analog_Output_Write_Property &rArr; Analog_Output_Present_Value_Set &rArr; wirte_bacnet_value_to_buf &rArr; tapdev_init &rArr; ENC28J60_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_timer
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_out
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_arpin
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reset
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_send
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_read
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNETTask
</UL>

<P><STRONG><a name="[b0]"></a>vSTORE_EEPTask</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vSTORE_EEPTask &rArr; AT24CXX_WriteOneByte &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>EEP_Dat_Init</STRONG> (Thumb, 2266 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = EEP_Dat_Init &rArr; uart1_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Object_Name
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internalDeal
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>main</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = main &rArr; mass_flash_init &rArr; iap_write_appbin &rArr; STMFLASH_Write_NoCheck &rArr; STMFLASH_WriteHalfWord &rArr; STMFLASH_WaitDone &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_flash_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_on
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_off
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_gpio_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEP_Dat_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_config
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[3fc]"></a>vAirFlowTask</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = NMI_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = HardFault_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = MemManage_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = BusFault_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = UsageFault_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>SVC_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f10x_it.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = DebugMon_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>PendSV_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f10x_it.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[ca]"></a>SysTick_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f10x_it.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[4f]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(.text)
</UL>
<P><STRONG><a name="[3fd]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[119]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Int_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_GPIO_init
</UL>

<P><STRONG><a name="[bc]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3fe]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[3ff]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>ADC_DeInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[12d]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputs_adc_init
</UL>

<P><STRONG><a name="[400]"></a>ADC_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputs_adc_init
</UL>

<P><STRONG><a name="[401]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[402]"></a>ADC_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputs_adc_init
</UL>

<P><STRONG><a name="[130]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputs_adc_init
</UL>

<P><STRONG><a name="[131]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputs_adc_init
</UL>

<P><STRONG><a name="[132]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputs_adc_init
</UL>

<P><STRONG><a name="[13e]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_getChannal
</UL>

<P><STRONG><a name="[403]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[404]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[405]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_getChannal
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputs_adc_init
</UL>

<P><STRONG><a name="[406]"></a>ADC_ExternalTrigConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_getChannal
</UL>

<P><STRONG><a name="[407]"></a>ADC_GetDualModeConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[408]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[409]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[40a]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[40b]"></a>ADC_ExternalTrigInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[40c]"></a>ADC_SoftwareStartInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[40d]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[40e]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[40f]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[410]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[411]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[412]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[413]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[414]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[415]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_getChannal
</UL>

<P><STRONG><a name="[13d]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_getChannal
</UL>

<P><STRONG><a name="[416]"></a>ADC_GetITStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[417]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[418]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_GPIO_init
</UL>

<P><STRONG><a name="[419]"></a>EXTI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[41a]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[41b]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[41c]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[41d]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[41e]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[d0]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[ea]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Reset
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_gpio_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_GPIO_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_IO_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_IO_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputs_io_init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_SDA_IN
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_SDA_OUT
</UL>

<P><STRONG><a name="[41f]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Status_Scan
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_ReadDIO0Pin
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_read_byte
</UL>

<P><STRONG><a name="[144]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Status_Scan
</UL>

<P><STRONG><a name="[420]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[421]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Buf
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read_Buf
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Op
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read_Op
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Reset
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_led
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputs_scan
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_off
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_GPIO_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Status_Scan
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_IO_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_IO_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_output
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_read_byte
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_write_byte
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_NAck
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_Ack
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_wait_for_ack
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_stop
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_start
</UL>

<P><STRONG><a name="[eb]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Buf
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read_Buf
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Op
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read_Op
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Reset
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_led
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputs_scan
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_on
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Status_Scan
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_output
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_read_byte
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_write_byte
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_NAck
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_Ack
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_wait_for_ack
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_stop
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_start
</UL>

<P><STRONG><a name="[422]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[423]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[424]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[425]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[426]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_config
</UL>

<P><STRONG><a name="[1f7]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_GPIO_init
</UL>

<P><STRONG><a name="[427]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_init
</UL>

<P><STRONG><a name="[1f4]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_init
</UL>

<P><STRONG><a name="[1f5]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_init
</UL>

<P><STRONG><a name="[aa]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNETTask
</UL>

<P><STRONG><a name="[1f6]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_init
</UL>

<P><STRONG><a name="[428]"></a>IWDG_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[429]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[42a]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[d1]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[42b]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[42c]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[42d]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[42e]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[42f]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[430]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[431]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[432]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[433]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[434]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[435]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputs_adc_init
</UL>

<P><STRONG><a name="[436]"></a>RCC_LSEConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[437]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[438]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[439]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
</UL>

<P><STRONG><a name="[43a]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Reset
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_gpio_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_GPIO_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_IO_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_IO_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_config
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleRate
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputs_adc_init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputs_io_init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_SDA_IN
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_SDA_OUT
</UL>

<P><STRONG><a name="[106]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Int_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[ce]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>

<P><STRONG><a name="[d4]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[43b]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[43c]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[43d]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[43e]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[43f]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[440]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[103]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[d5]"></a>I2S_Init</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[102]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[441]"></a>I2S_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SetSpeed
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[442]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[443]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[444]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[ff]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[445]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[446]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[447]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[448]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[449]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[44a]"></a>SPI_GetCRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[44b]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[44c]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[44d]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[44e]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[44f]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>TIM_DeInit</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[118]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Int_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleRate
</UL>

<P><STRONG><a name="[450]"></a>TIM_OC1Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[451]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleRate
</UL>

<P><STRONG><a name="[452]"></a>TIM_OC4Init</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[de]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[dc]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[da]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[d8]"></a>TIM_ICInit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[e1]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[453]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleRate
</UL>

<P><STRONG><a name="[454]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[455]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[456]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Int_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleRate
</UL>

<P><STRONG><a name="[137]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleRate
</UL>

<P><STRONG><a name="[11a]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Int_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
</UL>

<P><STRONG><a name="[457]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[458]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[459]"></a>TIM_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[45a]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[e2]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[e4]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[e6]"></a>TIM_ETRConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[e5]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[e7]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[45b]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[45c]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[45d]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[45e]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[45f]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[460]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[461]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[462]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[463]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[464]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[465]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[466]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[467]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[468]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[469]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[46a]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[46b]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[46c]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[46d]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[46e]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[46f]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[470]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[471]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[472]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[473]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[474]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[475]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[476]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[477]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[478]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[479]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[47a]"></a>TIM_CCxNCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[47b]"></a>TIM_SelectOCxM</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[47c]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[47d]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[47e]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[47f]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[480]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[481]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[482]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[483]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[484]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[485]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[486]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[487]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[488]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[489]"></a>TIM_SetClockDivision</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[48a]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[48b]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[48c]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[48d]"></a>TIM_GetCapture4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[48e]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[48f]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[116]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[490]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[491]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[e9]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[492]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[493]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[494]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[176]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendDataString
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[495]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[496]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[497]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[498]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[499]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[49a]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_byte
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1b6]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[49b]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[49c]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[49d]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[49e]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[49f]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4a0]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4a1]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4a2]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4a3]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4a4]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1b9]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_byte
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1b5]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[4a5]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3a0]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ae]"></a>LED_Init</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLED0Task
</UL>

<P><STRONG><a name="[af]"></a>tabulate_LED_STATE</STRONG> (Thumb, 1624 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLED0Task
</UL>

<P><STRONG><a name="[ec]"></a>refresh_led</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = refresh_led
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[ee]"></a>IIC_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
</UL>

<P><STRONG><a name="[ef]"></a>IIC_Start</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC_Start &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[f1]"></a>IIC_Stop</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC_Stop &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[f2]"></a>IIC_Wait_Ack</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[f3]"></a>IIC_Ack</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC_Ack &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[f4]"></a>IIC_NAck</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC_NAck &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[f5]"></a>IIC_Send_Byte</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IIC_Send_Byte &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[f6]"></a>IIC_Read_Byte</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[b8]"></a>AT24CXX_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AT24CXX_Init &rArr; IIC_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEP_Dat_Init
</UL>

<P><STRONG><a name="[ba]"></a>AT24CXX_ReadOneByte</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLenByte
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEP_Dat_Init
</UL>

<P><STRONG><a name="[b1]"></a>AT24CXX_WriteOneByte</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AT24CXX_WriteOneByte &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteLenByte
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internalDeal
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEP_Dat_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSTORE_EEPTask
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_bacnet_value_to_buf
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_SCAN_APP
</UL>

<P><STRONG><a name="[f7]"></a>AT24CXX_WriteLenByte</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, 24cxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>

<P><STRONG><a name="[f8]"></a>AT24CXX_ReadLenByte</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, 24cxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[f9]"></a>AT24CXX_Check</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, 24cxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[fa]"></a>AT24CXX_Read</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, 24cxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[fb]"></a>AT24CXX_Write</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, 24cxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>

<P><STRONG><a name="[fc]"></a>SPI1_ReadWriteByte</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Buf
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read_Buf
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Op
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read_Op
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[100]"></a>SPI1_SetSpeed</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_SetSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[c3]"></a>SPI1_Init</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI1_Init &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_StructInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>SPI2_SetSpeed</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_SetSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[105]"></a>SPI2_ReadWriteByte</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_transfer8
</UL>

<P><STRONG><a name="[c4]"></a>SPI2_Init</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI2_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SetSpeed
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10f]"></a>STMFLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stmflash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_flash_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Mass
</UL>

<P><STRONG><a name="[110]"></a>STMFLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stmflash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_flash_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Mass
</UL>

<P><STRONG><a name="[108]"></a>STMFLASH_GetStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stmflash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WaitDone
</UL>

<P><STRONG><a name="[107]"></a>STMFLASH_WaitDone</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stmflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = STMFLASH_WaitDone &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_GetStatus
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WriteHalfWord
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ErasePage
</UL>

<P><STRONG><a name="[109]"></a>STMFLASH_ErasePage</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stmflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = STMFLASH_ErasePage &rArr; STMFLASH_WaitDone &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WaitDone
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_flash_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Mass
</UL>

<P><STRONG><a name="[10a]"></a>STMFLASH_WriteHalfWord</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stmflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = STMFLASH_WriteHalfWord &rArr; STMFLASH_WaitDone &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WaitDone
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write_NoCheck
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_flash_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Mass
</UL>

<P><STRONG><a name="[10d]"></a>STMFLASH_ReadHalfWord</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stmflash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_flash_init
</UL>

<P><STRONG><a name="[112]"></a>STMFLASH_BYTE</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stmflash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_MUL_Read
</UL>

<P><STRONG><a name="[10b]"></a>STMFLASH_Write_NoCheck</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, stmflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = STMFLASH_Write_NoCheck &rArr; STMFLASH_WriteHalfWord &rArr; STMFLASH_WaitDone &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WriteHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_write_appbin
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[10c]"></a>STMFLASH_Read</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stmflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[10e]"></a>STMFLASH_Write</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, stmflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write_NoCheck
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ErasePage
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Lock
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Write
</UL>

<P><STRONG><a name="[111]"></a>STMFLASH_MUL_Read</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stmflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = STMFLASH_MUL_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_BYTE
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_flash_init
</UL>

<P><STRONG><a name="[113]"></a>Test_Write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stmflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[114]"></a>iap_write_appbin</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, stmflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = iap_write_appbin &rArr; STMFLASH_Write_NoCheck &rArr; STMFLASH_WriteHalfWord &rArr; STMFLASH_WaitDone &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write_NoCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_flash_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Mass
</UL>

<P><STRONG><a name="[2b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timerx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[117]"></a>TIM3_Int_Init</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, timerx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>

<P><STRONG><a name="[44]"></a>TIM6_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, timerx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM6_IRQHandler &rArr; refresh_led
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_led
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[11c]"></a>TIM6_Int_Init</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, timerx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM6_Int_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Reset
</UL>

<P><STRONG><a name="[11d]"></a>ENC28J60_Reset</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ENC28J60_Reset &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Int_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Init
</UL>

<P><STRONG><a name="[11e]"></a>ENC28J60_Read_Op</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ENC28J60_Read_Op &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Receive
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read
</UL>

<P><STRONG><a name="[11f]"></a>ENC28J60_Write_Op</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ENC28J60_Write_Op &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Receive
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Send
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Set_Bank
</UL>

<P><STRONG><a name="[120]"></a>ENC28J60_Read_Buf</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ENC28J60_Read_Buf &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Receive
</UL>

<P><STRONG><a name="[121]"></a>ENC28J60_Write_Buf</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ENC28J60_Write_Buf &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Send
</UL>

<P><STRONG><a name="[122]"></a>ENC28J60_Set_Bank</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ENC28J60_Set_Bank &rArr; ENC28J60_Write_Op &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Op
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read
</UL>

<P><STRONG><a name="[123]"></a>ENC28J60_Read</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ENC28J60_Read &rArr; ENC28J60_Set_Bank &rArr; ENC28J60_Write_Op &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Set_Bank
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read_Op
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Receive
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Send
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Get_EREVID
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_PHY_Write
</UL>

<P><STRONG><a name="[124]"></a>ENC28J60_Write</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ENC28J60_Write &rArr; ENC28J60_Set_Bank &rArr; ENC28J60_Write_Op &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Set_Bank
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Op
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Receive
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Send
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_PHY_Write
</UL>

<P><STRONG><a name="[125]"></a>ENC28J60_PHY_Write</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ENC28J60_PHY_Write &rArr; ENC28J60_Write &rArr; ENC28J60_Set_Bank &rArr; ENC28J60_Write_Op &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
</UL>

<P><STRONG><a name="[126]"></a>ENC28J60_Init</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ENC28J60_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_PHY_Write
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Set_Bank
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Op
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Reset
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
</UL>

<P><STRONG><a name="[127]"></a>ENC28J60_Get_EREVID</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, enc28j60.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read
</UL>

<P><STRONG><a name="[128]"></a>ENC28J60_Packet_Send</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ENC28J60_Packet_Send &rArr; ENC28J60_Write &rArr; ENC28J60_Set_Bank &rArr; ENC28J60_Write_Op &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Buf
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Op
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_send
</UL>

<P><STRONG><a name="[129]"></a>ENC28J60_Packet_Receive</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ENC28J60_Packet_Receive &rArr; ENC28J60_Write &rArr; ENC28J60_Set_Bank &rArr; ENC28J60_Write_Op &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read_Buf
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Op
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read_Op
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_read
</UL>

<P><STRONG><a name="[12a]"></a>inputs_io_init</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, inputs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = inputs_io_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputs_init
</UL>

<P><STRONG><a name="[12b]"></a>inputs_adc_init</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, inputs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = inputs_adc_init &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputs_init
</UL>

<P><STRONG><a name="[134]"></a>ADC_SampleRate</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, inputs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>

<P><STRONG><a name="[138]"></a>ims_count</STRONG> (Thumb, 270 bytes, Stack size 64 bytes, inputs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_current
</UL>

<P><STRONG><a name="[13c]"></a>read_current</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, inputs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_count
</UL>

<P><STRONG><a name="[b2]"></a>inputs_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, inputs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = inputs_init &rArr; inputs_adc_init &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputs_adc_init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputs_io_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vINPUTSTask
</UL>

<P><STRONG><a name="[84]"></a>ADC_getChannal</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, inputs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ADC_getChannal &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearFlag
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputs_scan
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGetACTask
</UL>

<P><STRONG><a name="[141]"></a>range_set_func</STRONG> (Thumb, 608 bytes, Stack size 0 bytes, inputs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputs_scan
</UL>

<P><STRONG><a name="[b4]"></a>inputs_scan</STRONG> (Thumb, 1070 bytes, Stack size 16 bytes, inputs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = inputs_scan &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_getChannal
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;range_set_func
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vINPUTSTask
</UL>

<P><STRONG><a name="[99]"></a>output_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, output.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = output_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOUTPUTSTask
</UL>

<P><STRONG><a name="[142]"></a>set_output</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, output.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_output
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_refresh
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_digit_output
</UL>

<P><STRONG><a name="[143]"></a>update_digit_output</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, output.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_output
</UL>

<P><STRONG><a name="[9b]"></a>output_refresh</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, output.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = output_refresh &rArr; set_output
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_output
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOUTPUTSTask
</UL>

<P><STRONG><a name="[bf]"></a>beeper_gpio_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = beeper_gpio_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>beeper_on</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = beeper_on
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>beeper_off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = beeper_off
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>KEY_IO_Init</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEY_IO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vKEYTask
</UL>

<P><STRONG><a name="[97]"></a>KEY_Status_Scan</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = KEY_Status_Scan &rArr; key_analyse
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_analyse
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vKEYTask
</UL>

<P><STRONG><a name="[c6]"></a>xTaskGenericCreate</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[155]"></a>vTaskDelete</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[157]"></a>vTaskIncrementTick</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[158]"></a>xTaskResumeAll</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[15c]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[15b]"></a>vTaskDelayUntil</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[15d]"></a>vTaskDelay</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[15e]"></a>uxTaskPriorityGet</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[15f]"></a>vTaskPrioritySet</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[75]"></a>vTaskSwitchContext</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortPendSVHandler
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>

<P><STRONG><a name="[160]"></a>vTaskSuspend</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[162]"></a>xTaskIsTaskSuspended</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[161]"></a>vTaskResume</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIsTaskSuspended
</UL>

<P><STRONG><a name="[163]"></a>xTaskResumeFromISR</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIsTaskSuspended
</UL>

<P><STRONG><a name="[c7]"></a>vTaskStartScheduler</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetInterruptMask
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[167]"></a>vTaskEndScheduler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetInterruptMask
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEndScheduler
</UL>

<P><STRONG><a name="[169]"></a>xTaskGetTickCount</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[16a]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetInterruptMask
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
</UL>

<P><STRONG><a name="[4a6]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[16d]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[16f]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[16e]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
</UL>

<P><STRONG><a name="[4a7]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>uxTaskGetStackHighWaterMark</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usTaskCheckFreeStackSpace
</UL>

<P><STRONG><a name="[178]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[148]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[14b]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
</UL>

<P><STRONG><a name="[152]"></a>vListInsertEnd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[15a]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[156]"></a>vListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[150]"></a>pxPortInitialiseStack</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[166]"></a>xPortStartScheduler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortStartFirstTask
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTimerInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[168]"></a>vPortEndScheduler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEndScheduler
</UL>

<P><STRONG><a name="[154]"></a>vPortYieldFromISR</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[151]"></a>vPortEnterCritical</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[153]"></a>vPortExitCritical</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[d]"></a>xPortSysTickHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xPortSysTickHandler &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetInterruptMask
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[14d]"></a>pvPortMalloc</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, heap_2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
</UL>

<P><STRONG><a name="[14e]"></a>vPortFree</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, heap_2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
</UL>

<P><STRONG><a name="[4a8]"></a>xPortGetFreeHeapSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heap_2.o(.text), UNUSED)

<P><STRONG><a name="[4a9]"></a>vPortInitialiseBlocks</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heap_2.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>_sys_exit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[57]"></a>fputc</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[bb]"></a>uart1_init</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uart1_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internalDeal
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEP_Dat_Init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_bacnet_value_to_buf
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_modbus
</UL>

<P><STRONG><a name="[be]"></a>delay_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>delay_us</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WaitDone
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_Write_Data
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkData
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_read_byte
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_write_byte
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_NAck
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_Ack
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_wait_for_ack
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_stop
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_start
</UL>

<P><STRONG><a name="[82]"></a>delay_ms</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Reset
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputs_scan
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSTORE_EEPTask
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOUTPUTSTask
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vKEYTask
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRFMTask
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAcceleroTask
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGetACTask
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vINPUTSTask
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLED0Task
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCOMMTask
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNETTask
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSTP_TASK
</UL>

<P><STRONG><a name="[9d]"></a>timer_set</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp
</UL>

<P><STRONG><a name="[a5]"></a>timer_reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
</UL>

<P><STRONG><a name="[17a]"></a>timer_restart</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>

<P><STRONG><a name="[a4]"></a>timer_expired</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_expired
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp
</UL>

<P><STRONG><a name="[4aa]"></a>uip_setipid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uip.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>uip_add32</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, uip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add_rcv_nxt
</UL>

<P><STRONG><a name="[9f]"></a>htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udp_new
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_connect
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ipchksum
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_chksum
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_found
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newdata
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_entries
</UL>

<P><STRONG><a name="[17b]"></a>uip_chksum</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum
</UL>

<P><STRONG><a name="[17d]"></a>uip_ipchksum</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = uip_ipchksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[17f]"></a>uip_tcpchksum</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uip_tcpchksum &rArr; upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[180]"></a>uip_udpchksum</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uip_udpchksum &rArr; upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[18b]"></a>uip_init</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, uip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
</UL>

<P><STRONG><a name="[181]"></a>uip_connect</STRONG> (Thumb, 254 bytes, Stack size 12 bytes, uip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>

<P><STRONG><a name="[182]"></a>uip_udp_new</STRONG> (Thumb, 194 bytes, Stack size 12 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uip_udp_new
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpc_init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_bacnet_APP
</UL>

<P><STRONG><a name="[4ab]"></a>uip_unlisten</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, uip.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>uip_listen</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, uip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpc_configured
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_scan_init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_Init
</UL>

<P><STRONG><a name="[a0]"></a>uip_process</STRONG> (Thumb, 4930 bytes, Stack size 16 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112 + Unknown Stack Size
<LI>Call Chain = uip_process &rArr; udp_appcall &rArr; UDP_bacnet_APP &rArr; npdu_handler &rArr; apdu_handler &rArr; handler_write_property &rArr; Analog_Output_Write_Property &rArr; Analog_Output_Present_Value_Set &rArr; wirte_bacnet_value_to_buf &rArr; tapdev_init &rArr; ENC28J60_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_log
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_appcall
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udpchksum
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_tcpchksum
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ipchksum
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add32
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add_rcv_nxt
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
</UL>

<P><STRONG><a name="[188]"></a>uip_send</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_request
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_discover
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_send_pdu
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_scan_reply
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_senddata
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_entries
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_mpdu
</UL>

<P><STRONG><a name="[4ac]"></a>uip_arp_init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, uip_arp.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>uip_arp_timer</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, uip_arp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
</UL>

<P><STRONG><a name="[a3]"></a>uip_arp_arpin</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, uip_arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uip_arp_arpin &rArr; uip_arp_update
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_update
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
</UL>

<P><STRONG><a name="[a1]"></a>uip_arp_out</STRONG> (Thumb, 366 bytes, Stack size 8 bytes, uip_arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = uip_arp_out
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
</UL>

<P><STRONG><a name="[179]"></a>clock_time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock-arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_restart
</UL>

<P><STRONG><a name="[a8]"></a>tapdev_init</STRONG> (Thumb, 534 bytes, Stack size 16 bytes, tapdev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tapdev_init &rArr; ENC28J60_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_PHY_Write
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_scan_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpc_request
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpc_init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_listen
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNETTask
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_bacnet_value_to_buf
</UL>

<P><STRONG><a name="[9e]"></a>tapdev_read</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tapdev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tapdev_read &rArr; ENC28J60_Packet_Receive &rArr; ENC28J60_Write &rArr; ENC28J60_Set_Bank &rArr; ENC28J60_Write_Op &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
</UL>

<P><STRONG><a name="[a2]"></a>tapdev_send</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tapdev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tapdev_send &rArr; ENC28J60_Packet_Send &rArr; ENC28J60_Write &rArr; ENC28J60_Set_Bank &rArr; ENC28J60_Write_Op &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
</UL>

<P><STRONG><a name="[185]"></a>tcp_appcall</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tcp_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = tcp_appcall &rArr; tcp_server_appcall &rArr; responseCmd &rArr; ACCELERO_Read_Data &rArr; ACCELERO_I2C_read_byte &rArr; ACCELERO_I2C_NAck &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_appcall
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[187]"></a>uip_log</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tcp_demo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_aborted
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_timedout
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_closed
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_connected
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_acked
</UL>

<P><STRONG><a name="[19f]"></a>Dhcpc_DeInit</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, dhcpc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp
</UL>

<P><STRONG><a name="[18f]"></a>dhcpc_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dhcpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = dhcpc_init &rArr; uip_udp_new
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udp_new
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
</UL>

<P><STRONG><a name="[1a1]"></a>dhcpc_appcall</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dhcpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dhcpc_appcall &rArr; handle_dhcp &rArr; send_request &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[190]"></a>dhcpc_request</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dhcpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcpc_request
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
</UL>

<P><STRONG><a name="[1a2]"></a>resolv_found</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = resolv_found &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newdata
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_entries
</UL>

<P><STRONG><a name="[1a6]"></a>resolv_appcall</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = resolv_appcall &rArr; newdata &rArr; resolv_found &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newdata
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_entries
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[1a7]"></a>resolv_query</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, resolv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>

<P><STRONG><a name="[1a9]"></a>resolv_lookup</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, resolv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[4ad]"></a>resolv_getserver</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, resolv.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>resolv_conf</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, resolv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpc_configured
</UL>

<P><STRONG><a name="[4ae]"></a>resolv_init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, resolv.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>tcp_server_senddata</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcp_modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_server_senddata &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_appcall
</UL>

<P><STRONG><a name="[1ac]"></a>tcp_server_acked</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tcp_modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_server_acked
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_log
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_appcall
</UL>

<P><STRONG><a name="[1ad]"></a>tcp_server_connected</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tcp_modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_server_connected
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_log
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_appcall
</UL>

<P><STRONG><a name="[1ae]"></a>tcp_server_closed</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tcp_modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_server_closed
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_log
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_appcall
</UL>

<P><STRONG><a name="[1af]"></a>tcp_server_timedout</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tcp_modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_server_timedout
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_log
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_appcall
</UL>

<P><STRONG><a name="[1b0]"></a>tcp_server_aborted</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tcp_modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_server_aborted
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_log
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_appcall
</UL>

<P><STRONG><a name="[191]"></a>tcp_server_appcall</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, tcp_modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = tcp_server_appcall &rArr; responseCmd &rArr; ACCELERO_Read_Data &rArr; ACCELERO_I2C_read_byte &rArr; ACCELERO_I2C_NAck &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseCmd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internalDeal
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_aborted
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_timedout
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_closed
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_connected
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_acked
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_senddata
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_appcall
</UL>

<P><STRONG><a name="[18d]"></a>udp_scan_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, udp_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_scan_init
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_listen
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpc_configured
</UL>

<P><STRONG><a name="[1b1]"></a>udp_scan_reply</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, udp_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = udp_scan_reply &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_SCAN_APP
</UL>

<P><STRONG><a name="[1b2]"></a>UDP_SCAN_APP</STRONG> (Thumb, 572 bytes, Stack size 16 bytes, udp_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UDP_SCAN_APP &rArr; AT24CXX_WriteOneByte &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_scan_reply
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[186]"></a>udp_appcall</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, udp_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + Unknown Stack Size
<LI>Call Chain = udp_appcall &rArr; UDP_bacnet_APP &rArr; npdu_handler &rArr; apdu_handler &rArr; handler_write_property &rArr; Analog_Output_Write_Property &rArr; Analog_Output_Present_Value_Set &rArr; wirte_bacnet_value_to_buf &rArr; tapdev_init &rArr; ENC28J60_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpc_appcall
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_bacnet_APP
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_SCAN_APP
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_appcall
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[1a0]"></a>dhcpc_configured</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, udp_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dhcpc_configured &rArr; udp_scan_init
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_scan_init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_listen
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_conf
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp
</UL>

<P><STRONG><a name="[ad]"></a>serial_restart</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, modbus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internalDeal
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealwithData
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCOMMTask
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[33]"></a>USART1_IRQHandler</STRONG> (Thumb, 416 bytes, Stack size 16 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART1_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_restart
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Silence_Reset
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[1ba]"></a>send_byte</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, modbus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_byte
</UL>

<P><STRONG><a name="[1bc]"></a>USART_SendDataString</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART_SendDataString &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseCmd
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Send_Data
</UL>

<P><STRONG><a name="[ab]"></a>modbus_init</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = modbus_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internalDeal
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCOMMTask
</UL>

<P><STRONG><a name="[a9]"></a>SoftReset</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, modbus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internalDeal
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNETTask
</UL>

<P><STRONG><a name="[93]"></a>internalDeal</STRONG> (Thumb, 3392 bytes, Stack size 40 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = internalDeal &rArr; EEP_Dat_Init &rArr; uart1_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_restart
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlmstp_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftReset
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recievebuf_Initialize
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_encrypt
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEP_Dat_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inital_Bacnet_Server
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setNetwork
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setFrequency
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setAddress
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealwithData
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRFMTask
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_appcall
</UL>

<P><STRONG><a name="[92]"></a>responseCmd</STRONG> (Thumb, 6202 bytes, Stack size 368 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = responseCmd &rArr; ACCELERO_Read_Data &rArr; ACCELERO_I2C_read_byte &rArr; ACCELERO_I2C_NAck &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_Read_Data
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_byte
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_transfer8
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_unselect
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_select
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_getNetwork
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_getFrequency
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_getAddress
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendDataString
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealwithData
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRFMTask
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_appcall
</UL>

<P><STRONG><a name="[1c7]"></a>checkData</STRONG> (Thumb, 588 bytes, Stack size 32 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = checkData &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealwithData
</UL>

<P><STRONG><a name="[ac]"></a>dealwithData</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = dealwithData &rArr; responseCmd &rArr; ACCELERO_Read_Data &rArr; ACCELERO_I2C_read_byte &rArr; ACCELERO_I2C_NAck &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_restart
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseCmd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internalDeal
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_crc16
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkData
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSend_COM
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCOMMTask
</UL>

<P><STRONG><a name="[4af]"></a>modbus_data_cope</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, modbus.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>init_crc16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, crc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealwithData
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRFMTask
</UL>

<P><STRONG><a name="[1bb]"></a>crc16_byte</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, crc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseCmd
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_byte
</UL>

<P><STRONG><a name="[1c8]"></a>crc16</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkData
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Receive_Frame_FSM
</UL>

<P><STRONG><a name="[1cc]"></a>switch_to_modbus</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, bacnet_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = switch_to_modbus &rArr; uart1_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Receive_Frame_FSM
</UL>

<P><STRONG><a name="[2a7]"></a>RS485_Get_Baudrate</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, bacnet_function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Turnaround_Delay
</UL>

<P><STRONG><a name="[4b0]"></a>Get_AVS</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bacnet_function.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>Get_bacnet_value_from_buf</STRONG> (Thumb, 598 bytes, Stack size 24 bytes, bacnet_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Get_bacnet_value_from_buf &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Present_Value
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Encode_Property_APDU
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Present_Value
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Encode_Property_APDU
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Read_Property
</UL>

<P><STRONG><a name="[1d1]"></a>wirte_bacnet_value_to_buf</STRONG> (Thumb, 1028 bytes, Stack size 24 bytes, bacnet_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = wirte_bacnet_value_to_buf &rArr; tapdev_init &rArr; ENC28J60_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlmstp_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recievebuf_Initialize
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inital_Bacnet_Server
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Write_Property
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Write_Property
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Present_Value_Set
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Write_Property
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Present_Value_Set
</UL>

<P><STRONG><a name="[231]"></a>write_bacnet_name_to_buf</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, bacnet_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = write_bacnet_name_to_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Write_Property
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Write_Property
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Write_Property
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Write_Property
</UL>

<P><STRONG><a name="[230]"></a>write_bacnet_unit_to_buf</STRONG> (Thumb, 464 bytes, Stack size 20 bytes, bacnet_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = write_bacnet_unit_to_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Write_Property
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Write_Property
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Write_Property
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Write_Property
</UL>

<P><STRONG><a name="[22b]"></a>get_AM_Status</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, bacnet_function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Encode_Property_APDU
</UL>

<P><STRONG><a name="[232]"></a>write_bacent_AM_to_buf</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, bacnet_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = write_bacent_AM_to_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Write_Property
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Write_Property
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Write_Property
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Write_Property
</UL>

<P><STRONG><a name="[4b1]"></a>add_remote_panel_db</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bacnet_function.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>get_label</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, bacnet_function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Encode_Property_APDU
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Encode_Property_APDU
</UL>

<P><STRONG><a name="[224]"></a>get_description</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, bacnet_function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Encode_Property_APDU
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Encode_Property_APDU
</UL>

<P><STRONG><a name="[22d]"></a>get_range</STRONG> (Thumb, 280 bytes, Stack size 0 bytes, bacnet_function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Encode_Property_APDU
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Encode_Property_APDU
</UL>

<P><STRONG><a name="[b9]"></a>Set_Object_Name</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bacnet_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_Object_Name
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEP_Dat_Init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Write_Property
</UL>

<P><STRONG><a name="[1d8]"></a>write_bacnet_description_to_buf</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, bacnet_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_bacnet_description_to_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Write_Property
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Write_Property
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Write_Property
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Write_Property
</UL>

<P><STRONG><a name="[286]"></a>Get_Object_Name</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bacnet_function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Encode_Property_APDU
</UL>

<P><STRONG><a name="[1db]"></a>bip_set_port</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_Init
</UL>

<P><STRONG><a name="[1da]"></a>bip_set_addr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_Init
</UL>

<P><STRONG><a name="[1d9]"></a>bip_set_socket</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_Init
</UL>

<P><STRONG><a name="[18e]"></a>bip_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bip_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_listen
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_set_socket
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_set_addr
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_set_port
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpc_configured
</UL>

<P><STRONG><a name="[1b3]"></a>UDP_bacnet_APP</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, bip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + Unknown Stack Size
<LI>Call Chain = UDP_bacnet_APP &rArr; npdu_handler &rArr; apdu_handler &rArr; handler_write_property &rArr; Analog_Output_Write_Property &rArr; Analog_Output_Present_Value_Set &rArr; wirte_bacnet_value_to_buf &rArr; tapdev_init &rArr; ENC28J60_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_handler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_receive
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udp_new
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[258]"></a>bip_socket</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bip.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_mpdu
</UL>

<P><STRONG><a name="[4b2]"></a>bip_valid</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bip.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>bip_get_addr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_receive
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_fdt_forward_npdu
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_bdt_forward_npdu
</UL>

<P><STRONG><a name="[7d]"></a>bip_set_broadcast_addr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inital_Bacnet_Server
</UL>

<P><STRONG><a name="[262]"></a>bip_get_broadcast_addr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bip.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_pdu
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_forward_npdu
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_bdt_forward_npdu
</UL>

<P><STRONG><a name="[1e3]"></a>bip_get_port</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_receive
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_pdu
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_fdt_forward_npdu
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_forward_npdu
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_bdt_forward_npdu
</UL>

<P><STRONG><a name="[1dc]"></a>bip_send_pdu</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, bip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bip_send_pdu &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unsigned16
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_decode_bip_address
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_send_pdu
</UL>

<P><STRONG><a name="[1df]"></a>bip_receive</STRONG> (Thumb, 360 bytes, Stack size 88 bytes, bip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bip_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned32
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned16
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_internet_to_bacnet_address
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_get_port
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_get_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_receive
</UL>

<P><STRONG><a name="[277]"></a>bip_get_my_address</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, bip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_get_my_address
</UL>

<P><STRONG><a name="[274]"></a>bip_get_broadcast_address</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, bip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_get_broadcast_address
</UL>

<P><STRONG><a name="[1ed]"></a>get_input_raw</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, io_control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_input
</UL>

<P><STRONG><a name="[4b3]"></a>Set_Input_Type</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, io_control.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>set_output_raw</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, io_control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_output
</UL>

<P><STRONG><a name="[1ee]"></a>conver_by_unit_5v</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, io_control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_input
</UL>

<P><STRONG><a name="[1ef]"></a>conver_by_unit_10v</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, io_control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_input
</UL>

<P><STRONG><a name="[1e5]"></a>conver_by_unit_custable</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, io_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = conver_by_unit_custable &rArr; get_input_value_by_range
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input_value_by_range
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_input
</UL>

<P><STRONG><a name="[1ec]"></a>get_max_input</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, io_control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_input
</UL>

<P><STRONG><a name="[1e7]"></a>get_max_output</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, io_control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_output
</UL>

<P><STRONG><a name="[1f0]"></a>get_high_spd_counter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, io_control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_input
</UL>

<P><STRONG><a name="[4b4]"></a>set_high_spd_counter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, io_control.o(.text), UNUSED)

<P><STRONG><a name="[4b5]"></a>Filter</STRONG> (Thumb, 142 bytes, Stack size 20 bytes, io_control.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>control_output</STRONG> (Thumb, 450 bytes, Stack size 24 bytes, outputs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = control_output
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_double
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_max_output
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_output_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOUTPUTSTask
</UL>

<P><STRONG><a name="[1e9]"></a>swap_double</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, inputs_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_output
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_input
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_match_custom
</UL>

<P><STRONG><a name="[1eb]"></a>swap_word</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, inputs_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_match_custom
</UL>

<P><STRONG><a name="[1e6]"></a>get_input_value_by_range</STRONG> (Thumb, 230 bytes, Stack size 28 bytes, inputs_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_input_value_by_range
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_input
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conver_by_unit_custable
</UL>

<P><STRONG><a name="[1ea]"></a>test_match_custom</STRONG> (Thumb, 200 bytes, Stack size 20 bytes, inputs_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = test_match_custom
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_word
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_double
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_input
</UL>

<P><STRONG><a name="[b5]"></a>control_input</STRONG> (Thumb, 642 bytes, Stack size 24 bytes, inputs_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = control_input &rArr; conver_by_unit_custable &rArr; get_input_value_by_range
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_match_custom
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_double
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input_value_by_range
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_high_spd_counter
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_max_input
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conver_by_unit_custable
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conver_by_unit_10v
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conver_by_unit_5v
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vINPUTSTask
</UL>

<P><STRONG><a name="[b6]"></a>Flash_Write_Mass</STRONG> (Thumb, 382 bytes, Stack size 16 bytes, store.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Flash_Write_Mass &rArr; iap_write_appbin &rArr; STMFLASH_Write_NoCheck &rArr; STMFLASH_WriteHalfWord &rArr; STMFLASH_WaitDone &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_write_appbin
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WriteHalfWord
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ErasePage
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Lock
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Unlock
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vINPUTSTask
</UL>

<P><STRONG><a name="[c2]"></a>mass_flash_init</STRONG> (Thumb, 1156 bytes, Stack size 40 bytes, store.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = mass_flash_init &rArr; iap_write_appbin &rArr; STMFLASH_Write_NoCheck &rArr; STMFLASH_WriteHalfWord &rArr; STMFLASH_WaitDone &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_write_appbin
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_MUL_Read
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadHalfWord
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WriteHalfWord
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ErasePage
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Lock
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Unlock
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>watchdog_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, watchdog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = watchdog_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>RFM69_TIMER_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rfm69.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRFMTask
</UL>

<P><STRONG><a name="[8b]"></a>RFM69_GPIO_init</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, rfm69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RFM69_GPIO_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRFMTask
</UL>

<P><STRONG><a name="[1fa]"></a>interrupts</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rfm69.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_receiveDone
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_unselect
</UL>

<P><STRONG><a name="[1f9]"></a>RFM69_SetCSPin</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rfm69.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_initialize
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_unselect
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_select
</UL>

<P><STRONG><a name="[1c3]"></a>RFM69_unselect</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, rfm69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RFM69_unselect
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_SetCSPin
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseCmd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_encrypt
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_readAllRegs
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_interruptHandler
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_writeReg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_readReg
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_sendFrame
</UL>

<P><STRONG><a name="[1c2]"></a>SPI_transfer8</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfm69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_transfer8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseCmd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_encrypt
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_readAllRegs
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_interruptHandler
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_writeReg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_readReg
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_sendFrame
</UL>

<P><STRONG><a name="[1fb]"></a>noInterrupts</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rfm69.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_receiveDone
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_select
</UL>

<P><STRONG><a name="[1c1]"></a>RFM69_select</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, rfm69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RFM69_select
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noInterrupts
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_SetCSPin
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseCmd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_encrypt
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_readAllRegs
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_interruptHandler
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_writeReg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_readReg
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_sendFrame
</UL>

<P><STRONG><a name="[1fc]"></a>RFM69_readReg</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rfm69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RFM69_readReg &rArr; SPI_transfer8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_transfer8
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_unselect
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_select
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setMode
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_initialize
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_encrypt
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_rcCalibration
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_readTemperature
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_sendACK
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_send
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setPowerLevel
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setHighPower
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_interruptHandler
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_receiveBegin
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_readRSSI
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_sendFrame
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_getNetwork
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_getFrequency
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_getAddress
</UL>

<P><STRONG><a name="[1fd]"></a>RFM69_writeReg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rfm69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RFM69_writeReg &rArr; SPI_transfer8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_transfer8
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_unselect
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_select
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setMode
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_initialize
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_encrypt
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_rcCalibration
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_readTemperature
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_sendACK
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_send
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setPowerLevel
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setHighPower
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_receiveBegin
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setHighPowerRegs
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_readRSSI
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_sendFrame
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setNetwork
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setFrequency
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setAddress
</UL>

<P><STRONG><a name="[1fe]"></a>RFM69_readRSSI</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rfm69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RFM69_readRSSI &rArr; RFM69_writeReg &rArr; SPI_transfer8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_writeReg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_readReg
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_canSend
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_interruptHandler
</UL>

<P><STRONG><a name="[1ff]"></a>RFM69_setHighPowerRegs</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rfm69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RFM69_setHighPowerRegs &rArr; RFM69_writeReg &rArr; SPI_transfer8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_writeReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setMode
</UL>

<P><STRONG><a name="[8f]"></a>RFM69_setMode</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, rfm69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RFM69_setMode &rArr; RFM69_setHighPowerRegs &rArr; RFM69_writeReg &rArr; SPI_transfer8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setHighPowerRegs
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_writeReg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_readReg
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_sendWithRetry
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_initialize
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_encrypt
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRFMTask
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_readTemperature
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_receiveDone
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_canSend
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_sleep
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_interruptHandler
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_receiveBegin
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_sendFrame
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setFrequency
</UL>

<P><STRONG><a name="[200]"></a>RFM69_receiveBegin</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rfm69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RFM69_receiveBegin &rArr; RFM69_setMode &rArr; RFM69_setHighPowerRegs &rArr; RFM69_writeReg &rArr; SPI_transfer8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setMode
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_writeReg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_readReg
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_receiveDone
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_interruptHandler
</UL>

<P><STRONG><a name="[201]"></a>RFM69_interruptHandler</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, rfm69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RFM69_interruptHandler &rArr; RFM69_receiveBegin &rArr; RFM69_setMode &rArr; RFM69_setHighPowerRegs &rArr; RFM69_writeReg &rArr; SPI_transfer8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setMode
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_receiveBegin
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_readRSSI
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_readReg
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_transfer8
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_unselect
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_select
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[36]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rfm69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EXTI15_10_IRQHandler &rArr; RFM69_interruptHandler &rArr; RFM69_receiveBegin &rArr; RFM69_setMode &rArr; RFM69_setHighPowerRegs &rArr; RFM69_writeReg &rArr; SPI_transfer8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_interruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[1bf]"></a>RFM69_setAddress</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rfm69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RFM69_setAddress &rArr; RFM69_writeReg &rArr; SPI_transfer8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_writeReg
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internalDeal
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_initialize
</UL>

<P><STRONG><a name="[207]"></a>Timeout_IsTimeout1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rfm69.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_sendWithRetry
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_initialize
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_sendACK
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_sendFrame
</UL>

<P><STRONG><a name="[206]"></a>Timeout_SetTimeout1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rfm69.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_sendWithRetry
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_initialize
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_sendACK
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_sendFrame
</UL>

<P><STRONG><a name="[202]"></a>RFM69_setHighPower</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rfm69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RFM69_setHighPower &rArr; RFM69_writeReg &rArr; SPI_transfer8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_writeReg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_readReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_initialize
</UL>

<P><STRONG><a name="[8e]"></a>RFM69_encrypt</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, rfm69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RFM69_encrypt &rArr; RFM69_setMode &rArr; RFM69_setHighPowerRegs &rArr; RFM69_writeReg &rArr; SPI_transfer8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setMode
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_writeReg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_readReg
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_transfer8
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_unselect
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_select
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internalDeal
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_initialize
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRFMTask
</UL>

<P><STRONG><a name="[1bd]"></a>RFM69_setFrequency</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, rfm69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RFM69_setFrequency &rArr; RFM69_setMode &rArr; RFM69_setHighPowerRegs &rArr; RFM69_writeReg &rArr; SPI_transfer8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setMode
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_writeReg
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internalDeal
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_initialize
</UL>

<P><STRONG><a name="[1be]"></a>RFM69_setNetwork</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rfm69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RFM69_setNetwork &rArr; RFM69_writeReg &rArr; SPI_transfer8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_writeReg
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internalDeal
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_initialize
</UL>

<P><STRONG><a name="[8d]"></a>RFM69_initialize</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, rfm69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RFM69_initialize &rArr; RFM69_setFrequency &rArr; RFM69_setMode &rArr; RFM69_setHighPowerRegs &rArr; RFM69_writeReg &rArr; SPI_transfer8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setMode
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_encrypt
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setHighPower
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timeout_SetTimeout1
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timeout_IsTimeout1
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_writeReg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_readReg
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_SetCSPin
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setNetwork
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setFrequency
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setAddress
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRFMTask
</UL>

<P><STRONG><a name="[1c6]"></a>RFM69_getFrequency</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, rfm69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RFM69_getFrequency &rArr; RFM69_readReg &rArr; SPI_transfer8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_readReg
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseCmd
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_sendFrame
</UL>

<P><STRONG><a name="[209]"></a>RFM69_sleep</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rfm69.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setMode
</UL>

<P><STRONG><a name="[1c5]"></a>RFM69_getAddress</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rfm69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RFM69_getAddress &rArr; RFM69_readReg &rArr; SPI_transfer8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_readReg
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseCmd
</UL>

<P><STRONG><a name="[1c4]"></a>RFM69_getNetwork</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rfm69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RFM69_getNetwork &rArr; RFM69_readReg &rArr; SPI_transfer8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_readReg
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseCmd
</UL>

<P><STRONG><a name="[20a]"></a>RFM69_setPowerLevel</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rfm69.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_writeReg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_readReg
</UL>

<P><STRONG><a name="[20b]"></a>RFM69_canSend</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rfm69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RFM69_canSend &rArr; RFM69_setMode &rArr; RFM69_setHighPowerRegs &rArr; RFM69_writeReg &rArr; SPI_transfer8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setMode
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_readRSSI
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_sendACK
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_send
</UL>

<P><STRONG><a name="[20c]"></a>RFM69_ReadDIO0Pin</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rfm69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RFM69_ReadDIO0Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_sendFrame
</UL>

<P><STRONG><a name="[20e]"></a>RFM69_receiveDone</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rfm69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RFM69_receiveDone &rArr; RFM69_receiveBegin &rArr; RFM69_setMode &rArr; RFM69_setHighPowerRegs &rArr; RFM69_writeReg &rArr; SPI_transfer8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setMode
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_receiveBegin
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noInterrupts
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_sendACK
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_ACKReceived
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_send
</UL>

<P><STRONG><a name="[20f]"></a>RFM69_send</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, rfm69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = RFM69_send &rArr; RFM69_sendFrame &rArr; RFM69_getFrequency &rArr; RFM69_readReg &rArr; SPI_transfer8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_receiveDone
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_canSend
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_writeReg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_readReg
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_sendFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_sendWithRetry
</UL>

<P><STRONG><a name="[94]"></a>RFM69_sendWithRetry</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, rfm69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RFM69_sendWithRetry &rArr; RFM69_send &rArr; RFM69_sendFrame &rArr; RFM69_getFrequency &rArr; RFM69_readReg &rArr; SPI_transfer8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setMode
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_send
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timeout_SetTimeout1
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timeout_IsTimeout1
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRFMTask
</UL>

<P><STRONG><a name="[210]"></a>RFM69_ACKReceived</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rfm69.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_receiveDone
</UL>

<P><STRONG><a name="[4b6]"></a>RFM69_ACKRequested</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, rfm69.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>RFM69_sendACK</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, rfm69.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_receiveDone
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_canSend
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timeout_SetTimeout1
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timeout_IsTimeout1
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_writeReg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_readReg
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_sendFrame
</UL>

<P><STRONG><a name="[4b7]"></a>RFM69_promiscuous</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rfm69.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>SerialPrint</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rfm69.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_readAllRegs
</UL>

<P><STRONG><a name="[213]"></a>RFM69_readAllRegs</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, rfm69.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPrint
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_transfer8
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_unselect
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_select
</UL>

<P><STRONG><a name="[214]"></a>RFM69_readTemperature</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rfm69.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setMode
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_writeReg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_readReg
</UL>

<P><STRONG><a name="[215]"></a>RFM69_rcCalibration</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rfm69.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_writeReg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_readReg
</UL>

<P><STRONG><a name="[86]"></a>ACCELERO_IO_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, accelero_meter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ACCELERO_IO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAcceleroTask
</UL>

<P><STRONG><a name="[216]"></a>ACCELERO_SDA_IN</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, accelero_meter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ACCELERO_SDA_IN &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_read_byte
</UL>

<P><STRONG><a name="[217]"></a>ACCELERO_SDA_OUT</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, accelero_meter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ACCELERO_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_init
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_write_byte
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_NAck
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_Ack
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_wait_for_ack
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_stop
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_start
</UL>

<P><STRONG><a name="[87]"></a>ACCELERO_I2C_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, accelero_meter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ACCELERO_I2C_init &rArr; ACCELERO_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAcceleroTask
</UL>

<P><STRONG><a name="[218]"></a>ACCELERO_I2C_start</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, accelero_meter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ACCELERO_I2C_start &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_Write_Data
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_Read_Data
</UL>

<P><STRONG><a name="[219]"></a>ACCELERO_I2C_stop</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, accelero_meter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ACCELERO_I2C_stop &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_Write_Data
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_Read_Data
</UL>

<P><STRONG><a name="[21a]"></a>ACCELERO_I2C_wait_for_ack</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, accelero_meter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ACCELERO_I2C_wait_for_ack &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_Write_Data
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_Read_Data
</UL>

<P><STRONG><a name="[21b]"></a>ACCELERO_I2C_Ack</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, accelero_meter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ACCELERO_I2C_Ack &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_read_byte
</UL>

<P><STRONG><a name="[21c]"></a>ACCELERO_I2C_NAck</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, accelero_meter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ACCELERO_I2C_NAck &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_read_byte
</UL>

<P><STRONG><a name="[21d]"></a>ACCELERO_I2C_write_byte</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, accelero_meter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ACCELERO_I2C_write_byte &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_Write_Data
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_Read_Data
</UL>

<P><STRONG><a name="[21e]"></a>ACCELERO_I2C_read_byte</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, accelero_meter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ACCELERO_I2C_read_byte &rArr; ACCELERO_I2C_NAck &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_SDA_IN
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_NAck
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_Read_Data
</UL>

<P><STRONG><a name="[88]"></a>ACCELERO_Write_Data</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, accelero_meter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ACCELERO_Write_Data &rArr; ACCELERO_I2C_write_byte &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_write_byte
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_wait_for_ack
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_stop
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_start
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAcceleroTask
</UL>

<P><STRONG><a name="[89]"></a>ACCELERO_Read_Data</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, accelero_meter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ACCELERO_Read_Data &rArr; ACCELERO_I2C_read_byte &rArr; ACCELERO_I2C_NAck &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_read_byte
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_write_byte
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_wait_for_ack
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_stop
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERO_I2C_start
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseCmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAcceleroTask
</UL>

<P><STRONG><a name="[376]"></a>Analog_Input_Valid_Instance</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ai.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_Property_APDU
</UL>

<P><STRONG><a name="[27b]"></a>Analog_Input_Count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ai.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Identifier
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Count
</UL>

<P><STRONG><a name="[281]"></a>Analog_Input_Index_To_Instance</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ai.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Identifier
</UL>

<P><STRONG><a name="[226]"></a>Analog_Input_Instance_To_Index</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ai.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Write_Property
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Encode_Property_APDU
</UL>

<P><STRONG><a name="[21f]"></a>Analog_Input_Encode_Property_APDU</STRONG> (Thumb, 310 bytes, Stack size 648 bytes, ai.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = Analog_Input_Encode_Property_APDU &rArr; encode_application_character_string &rArr; encode_bacnet_character_string &rArr; encode_bacnet_character_string_safe
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_range
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_description
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AM_Status
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_bacnet_value_from_buf
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_real
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_object_id
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_enumerated
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_character_string
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_boolean
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_bitstring
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_init_ansi
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_set_bit
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Instance_To_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_Property_APDU
</UL>

<P><STRONG><a name="[22e]"></a>Analog_Input_Write_Property</STRONG> (Thumb, 344 bytes, Stack size 632 bytes, ai.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = Analog_Input_Write_Property &rArr; wirte_bacnet_value_to_buf &rArr; tapdev_init &rArr; ENC28J60_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacnet_description_to_buf
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacent_AM_to_buf
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacnet_unit_to_buf
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacnet_name_to_buf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_bacnet_value_to_buf
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_application_data
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Instance_To_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_write_property
</UL>

<P><STRONG><a name="[4b8]"></a>Analog_Output_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ao.o(.text), UNUSED)

<P><STRONG><a name="[377]"></a>Analog_Output_Valid_Instance</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ao.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_Property_APDU
</UL>

<P><STRONG><a name="[27c]"></a>Analog_Output_Count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ao.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Identifier
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Count
</UL>

<P><STRONG><a name="[282]"></a>Analog_Output_Index_To_Instance</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ao.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Identifier
</UL>

<P><STRONG><a name="[234]"></a>Analog_Output_Instance_To_Index</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ao.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Write_Property
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Present_Value_Relinquish
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Present_Value_Set
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Present_Value_Priority
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Present_Value
</UL>

<P><STRONG><a name="[233]"></a>Analog_Output_Present_Value</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ao.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Analog_Output_Present_Value &rArr; Get_bacnet_value_from_buf &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_bacnet_value_from_buf
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Instance_To_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
</UL>

<P><STRONG><a name="[235]"></a>Analog_Output_Present_Value_Priority</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ao.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Instance_To_Index
</UL>

<P><STRONG><a name="[236]"></a>Analog_Output_Present_Value_Set</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ao.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Analog_Output_Present_Value_Set &rArr; wirte_bacnet_value_to_buf &rArr; tapdev_init &rArr; ENC28J60_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_bacnet_value_to_buf
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Instance_To_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Write_Property
</UL>

<P><STRONG><a name="[237]"></a>Analog_Output_Present_Value_Relinquish</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, ao.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Instance_To_Index
</UL>

<P><STRONG><a name="[238]"></a>Analog_Output_Encode_Property_APDU</STRONG> (Thumb, 528 bytes, Stack size 672 bytes, ao.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = Analog_Output_Encode_Property_APDU &rArr; Analog_Output_Present_Value &rArr; Get_bacnet_value_from_buf &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_range
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_description
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AM_Status
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_unsigned
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_null
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Present_Value
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Instance_To_Index
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_real
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_object_id
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_enumerated
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_character_string
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_boolean
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_bitstring
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_init_ansi
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_set_bit
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_init
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_Property_APDU
</UL>

<P><STRONG><a name="[23b]"></a>Analog_Output_Write_Property</STRONG> (Thumb, 406 bytes, Stack size 640 bytes, ao.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = Analog_Output_Write_Property &rArr; Analog_Output_Present_Value_Set &rArr; wirte_bacnet_value_to_buf &rArr; tapdev_init &rArr; ENC28J60_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacnet_description_to_buf
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacent_AM_to_buf
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacnet_unit_to_buf
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacnet_name_to_buf
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WPValidateArgType
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Present_Value_Set
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Instance_To_Index
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_application_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_write_property
</UL>

<P><STRONG><a name="[240]"></a>Analog_Value_Valid_Instance</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, av.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Write_Property
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_Property_APDU
</UL>

<P><STRONG><a name="[27a]"></a>Analog_Value_Count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, av.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Identifier
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Count
</UL>

<P><STRONG><a name="[280]"></a>Analog_Value_Index_To_Instance</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, av.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Identifier
</UL>

<P><STRONG><a name="[23e]"></a>Analog_Value_Instance_To_Index</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, av.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Write_Property
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Encode_Property_APDU
</UL>

<P><STRONG><a name="[23d]"></a>Analog_Value_Encode_Property_APDU</STRONG> (Thumb, 288 bytes, Stack size 648 bytes, av.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = Analog_Value_Encode_Property_APDU &rArr; encode_application_character_string &rArr; encode_bacnet_character_string &rArr; encode_bacnet_character_string_safe
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_range
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_description
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_bacnet_value_from_buf
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Instance_To_Index
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_real
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_object_id
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_enumerated
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_character_string
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_boolean
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_bitstring
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_init_ansi
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_set_bit
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_init
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_Property_APDU
</UL>

<P><STRONG><a name="[23f]"></a>Analog_Value_Write_Property</STRONG> (Thumb, 364 bytes, Stack size 640 bytes, av.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = Analog_Value_Write_Property &rArr; wirte_bacnet_value_to_buf &rArr; tapdev_init &rArr; ENC28J60_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacnet_description_to_buf
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacent_AM_to_buf
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacnet_unit_to_buf
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacnet_name_to_buf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_bacnet_value_to_buf
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Instance_To_Index
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Valid_Instance
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_application_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_write_property
</UL>

<P><STRONG><a name="[4b9]"></a>address_match</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, address.o(.text), UNUSED)

<P><STRONG><a name="[4ba]"></a>address_remove_device</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, address.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>address_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, address.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = address_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inital_Bacnet_Server
</UL>

<P><STRONG><a name="[4bb]"></a>address_init_partial</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, address.o(.text), UNUSED)

<P><STRONG><a name="[4bc]"></a>address_set_device_TTL</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, address.o(.text), UNUSED)

<P><STRONG><a name="[241]"></a>address_get_by_device</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, address.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[242]"></a>address_get_device_id</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, address.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacnet_address_same
</UL>

<P><STRONG><a name="[244]"></a>address_add</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, address.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = address_add &rArr; address_remove_oldest
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_remove_oldest
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_i_am_add
</UL>

<P><STRONG><a name="[246]"></a>address_bind_request</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, address.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_remove_oldest
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[247]"></a>address_add_binding</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, address.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_i_am_bind
</UL>

<P><STRONG><a name="[248]"></a>address_get_by_index</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, address.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[24d]"></a>address_count</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, address.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rr_address_list_encode
</UL>

<P><STRONG><a name="[249]"></a>address_list_encode</STRONG> (Thumb, 110 bytes, Stack size 624 bytes, address.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octetstring_init
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_octet_string
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_unsigned
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_object_id
</UL>

<P><STRONG><a name="[24c]"></a>rr_address_list_encode</STRONG> (Thumb, 394 bytes, Stack size 648 bytes, address.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octetstring_init
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_octet_string
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_count
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_unsigned
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_object_id
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_set_bit
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_init
</UL>

<P><STRONG><a name="[4bd]"></a>address_cache_timer</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, address.o(.text), UNUSED)

<P><STRONG><a name="[4be]"></a>Binary_Output_Property_Lists</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bo.o(.text), UNUSED)

<P><STRONG><a name="[4bf]"></a>Binary_Output_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bo.o(.text), UNUSED)

<P><STRONG><a name="[378]"></a>Binary_Output_Valid_Instance</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_Property_APDU
</UL>

<P><STRONG><a name="[27d]"></a>Binary_Output_Count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Identifier
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Count
</UL>

<P><STRONG><a name="[283]"></a>Binary_Output_Index_To_Instance</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Identifier
</UL>

<P><STRONG><a name="[24f]"></a>Binary_Output_Instance_To_Index</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Write_Property
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Present_Value
</UL>

<P><STRONG><a name="[24e]"></a>Binary_Output_Present_Value</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, bo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Binary_Output_Present_Value &rArr; Get_bacnet_value_from_buf &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_bacnet_value_from_buf
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Instance_To_Index
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
</UL>

<P><STRONG><a name="[250]"></a>Binary_Output_Encode_Property_APDU</STRONG> (Thumb, 598 bytes, Stack size 672 bytes, bo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = Binary_Output_Encode_Property_APDU &rArr; Binary_Output_Present_Value &rArr; Get_bacnet_value_from_buf &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_range
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_description
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AM_Status
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Present_Value
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Instance_To_Index
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_unsigned
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_null
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_object_id
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_enumerated
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_character_string
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_boolean
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_bitstring
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_init_ansi
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_set_bit
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_init
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_Property_APDU
</UL>

<P><STRONG><a name="[251]"></a>Binary_Output_Write_Property</STRONG> (Thumb, 532 bytes, Stack size 640 bytes, bo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = Binary_Output_Write_Property &rArr; wirte_bacnet_value_to_buf &rArr; tapdev_init &rArr; ENC28J60_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacnet_description_to_buf
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacent_AM_to_buf
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacnet_unit_to_buf
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacnet_name_to_buf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_bacnet_value_to_buf
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Instance_To_Index
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WPValidateArgType
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_application_data
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_write_property
</UL>

<P><STRONG><a name="[1de]"></a>encode_unsigned16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bacint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_send_pdu
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_pdu
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_read_bdt
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_register_foreign_device
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_read_fdt_ack
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_read_fdt_ack_init
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_forwarded_npdu
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_read_bdt_ack_init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_bvlc_result
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_encode_pdu
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_unsigned
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>

<P><STRONG><a name="[1e0]"></a>decode_unsigned16</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bacint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_receive
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_for_non_bbmd
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value_safe
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_decode
</UL>

<P><STRONG><a name="[317]"></a>encode_unsigned24</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bacint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_unsigned
</UL>

<P><STRONG><a name="[314]"></a>decode_unsigned24</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bacint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned
</UL>

<P><STRONG><a name="[2f9]"></a>encode_unsigned32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bacint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_unsigned
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_object_id
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>

<P><STRONG><a name="[1e1]"></a>decode_unsigned32</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, bacint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_receive
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_object_id
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value_safe
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
</UL>

<P><STRONG><a name="[320]"></a>encode_signed8</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bacint.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_signed
</UL>

<P><STRONG><a name="[31a]"></a>decode_signed8</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bacint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_signed
</UL>

<P><STRONG><a name="[321]"></a>encode_signed16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bacint.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_signed
</UL>

<P><STRONG><a name="[31b]"></a>decode_signed16</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bacint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_signed
</UL>

<P><STRONG><a name="[322]"></a>encode_signed24</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bacint.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_signed
</UL>

<P><STRONG><a name="[31c]"></a>decode_signed24</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, bacint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_signed
</UL>

<P><STRONG><a name="[323]"></a>encode_signed32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bacint.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_signed
</UL>

<P><STRONG><a name="[31d]"></a>decode_signed32</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, bacint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_signed
</UL>

<P><STRONG><a name="[252]"></a>bvlc_intial</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[4c0]"></a>bvlc_maintenance_timer</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, bvlc.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>bvlc_internet_to_bacnet_address</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bvlc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_receive
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
</UL>

<P><STRONG><a name="[260]"></a>bvlc_decode_bip_address</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_pdu
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_delete_foreign_device
</UL>

<P><STRONG><a name="[256]"></a>bvlc_encode_read_bdt</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unsigned16
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_bbmd_read_bdt
</UL>

<P><STRONG><a name="[257]"></a>bvlc_send_mpdu</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_register_with_bbmd
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_pdu
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_fdt
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_bdt
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_result
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_fdt_forward_npdu
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_forward_npdu
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_bdt_forward_npdu
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_bbmd_read_bdt
</UL>

<P><STRONG><a name="[259]"></a>bvlc_bbmd_read_bdt</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_mpdu
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_read_bdt
</UL>

<P><STRONG><a name="[269]"></a>bvlc_create_bdt</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
</UL>

<P><STRONG><a name="[26b]"></a>bvlc_register_foreign_device</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
</UL>

<P><STRONG><a name="[261]"></a>bvlc_bdt_forward_npdu</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_get_port
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_get_broadcast_addr
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_get_addr
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_mpdu
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_forwarded_npdu
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
</UL>

<P><STRONG><a name="[263]"></a>bvlc_forward_npdu</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_get_port
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_get_broadcast_addr
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_mpdu
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_forwarded_npdu
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
</UL>

<P><STRONG><a name="[264]"></a>bvlc_fdt_forward_npdu</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_get_port
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_get_addr
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_mpdu
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_forwarded_npdu
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
</UL>

<P><STRONG><a name="[265]"></a>bvlc_send_result</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_mpdu
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_bvlc_result
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
</UL>

<P><STRONG><a name="[266]"></a>bvlc_send_bdt</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_mpdu
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_read_bdt_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
</UL>

<P><STRONG><a name="[267]"></a>bvlc_send_fdt</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_mpdu
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_read_fdt_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
</UL>

<P><STRONG><a name="[26a]"></a>bvlc_bdt_member_mask_is_unicast</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
</UL>

<P><STRONG><a name="[268]"></a>bvlc_receive</STRONG> (Thumb, 628 bytes, Stack size 88 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned16
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_internet_to_bacnet_address
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_get_port
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_get_broadcast_addr
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_get_addr
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_socket
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_bdt_member_mask_is_unicast
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_fdt
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_bdt
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_result
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_fdt_forward_npdu
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_forward_npdu
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_bdt_forward_npdu
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_register_foreign_device
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_create_bdt
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_mpdu
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_decode_bip_address
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_delete_foreign_device
</UL>

<P><STRONG><a name="[26c]"></a>bvlc_send_pdu</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unsigned16
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_get_port
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_get_broadcast_addr
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_mpdu
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_decode_bip_address
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[26e]"></a>bvlc_register_with_bbmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_mpdu
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_register_foreign_device
</UL>

<P><STRONG><a name="[26f]"></a>bvlc_for_non_bbmd</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned16
</UL>

<P><STRONG><a name="[4c1]"></a>bvlc_get_last_result</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bvlc.o(.text), UNUSED)

<P><STRONG><a name="[4c2]"></a>bvlc_get_function_code</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bvlc.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>datalink_send_pdu</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, datalink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = datalink_send_pdu &rArr; bip_send_pdu &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_send_pdu
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlmstp_send_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs_To_Network
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_I_Am_Unicast
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_write_property
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_unrecognized_service
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_read_property
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_I_Am
</UL>

<P><STRONG><a name="[80]"></a>datalink_receive</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, datalink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 764<LI>Call Chain = datalink_receive &rArr; dlmstp_receive &rArr; MSTP_Master_Node_FSM &rArr; MSTP_Send_Frame &rArr; RS485_Send_Data &rArr; USART_SendDataString &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_receive
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlmstp_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSTP_TASK
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_bacnet_APP
</UL>

<P><STRONG><a name="[273]"></a>datalink_get_broadcast_address</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, datalink.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_get_broadcast_address
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlmstp_get_broadcast_address
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs_Local
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs_Global
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_encode_pdu
</UL>

<P><STRONG><a name="[276]"></a>datalink_get_my_address</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, datalink.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_get_my_address
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlmstp_get_my_address
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs_To_Network
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_unicast_encode_pdu
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_write_property
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_unrecognized_service
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_read_property
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_encode_pdu
</UL>

<P><STRONG><a name="[7a]"></a>Device_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inital_Bacnet_Server
</UL>

<P><STRONG><a name="[333]"></a>Device_Object_Instance_Number</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_Property_APDU
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_unicast_encode_pdu
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_who_is
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_encode_pdu
</UL>

<P><STRONG><a name="[7b]"></a>Device_Set_Object_Instance_Number</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inital_Bacnet_Server
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Write_Property
</UL>

<P><STRONG><a name="[28a]"></a>Device_Valid_Object_Instance_Number</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Write_Property
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_Property_APDU
</UL>

<P><STRONG><a name="[287]"></a>Device_Vendor_Identifier</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Encode_Property_APDU
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_unicast_encode_pdu
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_encode_pdu
</UL>

<P><STRONG><a name="[279]"></a>Device_Object_List_Count</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Device_Object_List_Count
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Count
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Count
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Count
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Count
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Encode_Property_APDU
</UL>

<P><STRONG><a name="[27f]"></a>Device_Object_List_Identifier</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Device_Object_List_Identifier
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Index_To_Instance
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Count
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Index_To_Instance
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Count
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Index_To_Instance
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Count
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Index_To_Instance
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Count
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Index_To_Instance
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Encode_Property_APDU
</UL>

<P><STRONG><a name="[285]"></a>Device_Encode_Property_APDU</STRONG> (Thumb, 704 bytes, Stack size 680 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = Device_Encode_Property_APDU &rArr; encode_application_character_string &rArr; encode_bacnet_character_string &rArr; encode_bacnet_character_string_safe
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Object_Name
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_service_supported
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Identifier
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Count
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Vendor_Identifier
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_unsigned
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_object_id
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_enumerated
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_character_string
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_bitstring
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_init_ansi
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_set_bit
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_init
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_Property_APDU
</UL>

<P><STRONG><a name="[289]"></a>Device_Write_Property</STRONG> (Thumb, 408 bytes, Stack size 640 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 740<LI>Call Chain = Device_Write_Property &rArr; bacapp_decode_application_data &rArr; bacapp_decode_data &rArr; decode_octet_string &rArr; octetstring_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Object_Name
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Set_Object_Instance_Number
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_encoding
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_ansi_copy
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Valid_Object_Instance_Number
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_application_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_write_property
</UL>

<P><STRONG><a name="[7e]"></a>dlmstp_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dlmstp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dlmstp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Silence_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internalDeal
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSTP_TASK
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_bacnet_value_to_buf
</UL>

<P><STRONG><a name="[4c3]"></a>dlmstp_cleanup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dlmstp.o(.text), UNUSED)

<P><STRONG><a name="[4c4]"></a>dlmstp_fill_bacnet_address</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dlmstp.o(.text), UNUSED)

<P><STRONG><a name="[296]"></a>MSTP_Receive_Frame_FSM</STRONG> (Thumb, 1142 bytes, Stack size 40 bytes, dlmstp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = MSTP_Receive_Frame_FSM &rArr; switch_to_modbus &rArr; uart1_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_modbus
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Silence_Reset
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Silence
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_ReceiveError
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_DataAvailable
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Calc_Header
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Calc_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlmstp_receive
</UL>

<P><STRONG><a name="[271]"></a>dlmstp_send_pdu</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dlmstp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dlmstp_send_pdu
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_send_pdu
</UL>

<P><STRONG><a name="[272]"></a>dlmstp_receive</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, dlmstp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = dlmstp_receive &rArr; MSTP_Master_Node_FSM &rArr; MSTP_Send_Frame &rArr; RS485_Send_Data &rArr; USART_SendDataString &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Receive_Frame_FSM
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Master_Node_FSM
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_receive
</UL>

<P><STRONG><a name="[29c]"></a>dlmstp_set_max_master</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dlmstp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlmstp_set_mac_address
</UL>

<P><STRONG><a name="[29b]"></a>dlmstp_set_mac_address</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dlmstp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlmstp_set_max_master
</UL>

<P><STRONG><a name="[4c5]"></a>dlmstp_mac_address</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dlmstp.o(.text), UNUSED)

<P><STRONG><a name="[4c6]"></a>dlmstp_set_max_info_frames</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dlmstp.o(.text), UNUSED)

<P><STRONG><a name="[4c7]"></a>dlmstp_max_info_frames</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dlmstp.o(.text), UNUSED)

<P><STRONG><a name="[4c8]"></a>dlmstp_max_master</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dlmstp.o(.text), UNUSED)

<P><STRONG><a name="[278]"></a>dlmstp_get_my_address</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dlmstp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_get_my_address
</UL>

<P><STRONG><a name="[275]"></a>dlmstp_get_broadcast_address</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, dlmstp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_get_broadcast_address
</UL>

<P><STRONG><a name="[29e]"></a>FIFO_Count</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Pull
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Empty
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Available
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Full
</UL>

<P><STRONG><a name="[29d]"></a>FIFO_Full</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FIFO_Full
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Put
</UL>

<P><STRONG><a name="[29f]"></a>FIFO_Available</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, fifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Add
</UL>

<P><STRONG><a name="[2a0]"></a>FIFO_Empty</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FIFO_Empty
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Get
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_DataAvailable
</UL>

<P><STRONG><a name="[4c9]"></a>FIFO_Peek</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[2a1]"></a>FIFO_Get</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FIFO_Get &rArr; FIFO_Empty
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Empty
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_DataAvailable
</UL>

<P><STRONG><a name="[2a2]"></a>FIFO_Pull</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Count
</UL>

<P><STRONG><a name="[1b7]"></a>FIFO_Put</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FIFO_Put &rArr; FIFO_Full
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[2a3]"></a>FIFO_Add</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, fifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Available
</UL>

<P><STRONG><a name="[4ca]"></a>FIFO_Flush</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>FIFO_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recievebuf_Initialize
</UL>

<P><STRONG><a name="[81]"></a>npdu_handler</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, h_npdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = npdu_handler &rArr; apdu_handler &rArr; handler_write_property &rArr; Analog_Output_Write_Property &rArr; Analog_Output_Present_Value_Set &rArr; wirte_bacnet_value_to_buf &rArr; tapdev_init &rArr; ENC28J60_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_decode
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_handler
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSTP_TASK
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_bacnet_APP
</UL>

<P><STRONG><a name="[7f]"></a>Recievebuf_Initialize</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rs485.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internalDeal
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSTP_TASK
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_bacnet_value_to_buf
</UL>

<P><STRONG><a name="[294]"></a>RS485_Transmitter_Enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rs485.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Send_Frame
</UL>

<P><STRONG><a name="[299]"></a>Timer_Silence</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rs485.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Receive_Frame_FSM
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Master_Node_FSM
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Turnaround_Delay
</UL>

<P><STRONG><a name="[293]"></a>RS485_Turnaround_Delay</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rs485.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RS485_Turnaround_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Get_Baudrate
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Silence
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Send_Frame
</UL>

<P><STRONG><a name="[1b8]"></a>Timer_Silence_Reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rs485.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlmstp_init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Receive_Frame_FSM
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Master_Node_FSM
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Send_Data
</UL>

<P><STRONG><a name="[295]"></a>RS485_Send_Data</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rs485.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RS485_Send_Data &rArr; USART_SendDataString &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Silence_Reset
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendDataString
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Send_Frame
</UL>

<P><STRONG><a name="[297]"></a>RS485_ReceiveError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rs485.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Receive_Frame_FSM
</UL>

<P><STRONG><a name="[298]"></a>RS485_DataAvailable</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rs485.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RS485_DataAvailable &rArr; FIFO_Get &rArr; FIFO_Empty
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Get
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Empty
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Receive_Frame_FSM
</UL>

<P><STRONG><a name="[4cb]"></a>Timer_Initialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rs485.o(.text), UNUSED)

<P><STRONG><a name="[4cc]"></a>apdu_set_confirmed_handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apdu.o(.text), UNUSED)

<P><STRONG><a name="[4cd]"></a>apdu_set_unrecognized_service_handler_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, apdu.o(.text), UNUSED)

<P><STRONG><a name="[4ce]"></a>apdu_set_unconfirmed_handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, apdu.o(.text), UNUSED)

<P><STRONG><a name="[288]"></a>apdu_service_supported</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, apdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = apdu_service_supported
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Encode_Property_APDU
</UL>

<P><STRONG><a name="[4cf]"></a>apdu_service_supported_to_index</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, apdu.o(.text), UNUSED)

<P><STRONG><a name="[4d0]"></a>apdu_set_confirmed_simple_ack_handler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, apdu.o(.text), UNUSED)

<P><STRONG><a name="[4d1]"></a>apdu_set_confirmed_ack_handler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, apdu.o(.text), UNUSED)

<P><STRONG><a name="[4d2]"></a>apdu_set_error_handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apdu.o(.text), UNUSED)

<P><STRONG><a name="[4d3]"></a>apdu_set_abort_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, apdu.o(.text), UNUSED)

<P><STRONG><a name="[4d4]"></a>apdu_set_reject_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, apdu.o(.text), UNUSED)

<P><STRONG><a name="[2a8]"></a>apdu_decode_confirmed_service_request</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, apdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = apdu_decode_confirmed_service_request
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_max_segs
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_max_apdu
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_handler
</UL>

<P><STRONG><a name="[4d5]"></a>apdu_timeout</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, apdu.o(.text), UNUSED)

<P><STRONG><a name="[4d6]"></a>apdu_timeout_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, apdu.o(.text), UNUSED)

<P><STRONG><a name="[4d7]"></a>apdu_retries</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, apdu.o(.text), UNUSED)

<P><STRONG><a name="[4d8]"></a>apdu_retries_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, apdu.o(.text), UNUSED)

<P><STRONG><a name="[2a5]"></a>apdu_handler</STRONG> (Thumb, 400 bytes, Stack size 80 bytes, apdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = apdu_handler &rArr; handler_write_property &rArr; Analog_Output_Write_Property &rArr; Analog_Output_Present_Value_Set &rArr; wirte_bacnet_value_to_buf &rArr; tapdev_init &rArr; ENC28J60_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_write_property
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_who_is
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_unrecognized_service
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_read_property
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_i_am_add
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_opening_tag_number
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_closing_tag_number
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_enumerated
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_I_Am
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_decode_confirmed_service_request
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_handler
</UL>

<P><STRONG><a name="[4d9]"></a>Binary_Input_Property_Lists</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bi.o(.text), UNUSED)

<P><STRONG><a name="[379]"></a>Binary_Input_Valid_Instance</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_Property_APDU
</UL>

<P><STRONG><a name="[27e]"></a>Binary_Input_Count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Identifier
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Count
</UL>

<P><STRONG><a name="[284]"></a>Binary_Input_Index_To_Instance</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Identifier
</UL>

<P><STRONG><a name="[4da]"></a>Binary_Input_Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bi.o(.text), UNUSED)

<P><STRONG><a name="[2b6]"></a>Binary_Input_Instance_To_Index</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Present_Value_Set
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Change_Of_Value_Clear
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Change_Of_Value
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Out_Of_Service
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Present_Value
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Out_Of_Service_Set
</UL>

<P><STRONG><a name="[2b5]"></a>Binary_Input_Present_Value</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, bi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Instance_To_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Encode_Value_List
</UL>

<P><STRONG><a name="[2b7]"></a>Binary_Input_Out_Of_Service</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, bi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Binary_Input_Out_Of_Service
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Instance_To_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Read_Property
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Encode_Value_List
</UL>

<P><STRONG><a name="[2b8]"></a>Binary_Input_Change_Of_Value</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, bi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Instance_To_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Encode_Value_List
</UL>

<P><STRONG><a name="[2b9]"></a>Binary_Input_Change_Of_Value_Clear</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, bi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Instance_To_Index
</UL>

<P><STRONG><a name="[2ba]"></a>Binary_Input_Encode_Value_List</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, bi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_set_bit
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_init
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Change_Of_Value
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Out_Of_Service
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Present_Value
</UL>

<P><STRONG><a name="[2bb]"></a>Binary_Input_Present_Value_Set</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Binary_Input_Present_Value_Set &rArr; wirte_bacnet_value_to_buf &rArr; tapdev_init &rArr; ENC28J60_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_bacnet_value_to_buf
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Instance_To_Index
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Write_Property
</UL>

<P><STRONG><a name="[2be]"></a>Binary_Input_Polarity</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Read_Property
</UL>

<P><STRONG><a name="[2c0]"></a>Binary_Input_Polarity_Set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Write_Property
</UL>

<P><STRONG><a name="[2bd]"></a>Binary_Input_Read_Property</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, bi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Binary_Input_Read_Property &rArr; Get_bacnet_value_from_buf &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_bacnet_value_from_buf
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_object_id
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_enumerated
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_boolean
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_bitstring
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_set_bit
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_init
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Polarity
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Out_Of_Service
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_Property_APDU
</UL>

<P><STRONG><a name="[2bf]"></a>Binary_Input_Write_Property</STRONG> (Thumb, 256 bytes, Stack size 640 bytes, bi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = Binary_Input_Write_Property &rArr; Binary_Input_Present_Value_Set &rArr; wirte_bacnet_value_to_buf &rArr; tapdev_init &rArr; ENC28J60_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WPValidateArgType
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_application_data
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Polarity_Set
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Present_Value_Set
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Out_Of_Service_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_write_property
</UL>

<P><STRONG><a name="[33c]"></a>bacnet_address_copy</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bacaddr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_unicast_encode_pdu
</UL>

<P><STRONG><a name="[243]"></a>bacnet_address_same</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, bacaddr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_get_device_id
</UL>

<P><STRONG><a name="[2c1]"></a>bacapp_encode_application_data</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, bacapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_octet_string
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_unsigned
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_real
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_object_id
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_enumerated
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_character_string
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_boolean
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_bitstring
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_time
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_signed
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_double
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_date
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_data
</UL>

<P><STRONG><a name="[2c6]"></a>bacapp_decode_data</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, bacapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = bacapp_decode_data &rArr; decode_octet_string &rArr; octetstring_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_signed
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_real_safe
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_octet_string
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_object_id_safe
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_double_safe
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_date_safe
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_character_string
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_boolean
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_bitstring
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_bacnet_time_safe
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_enumerated
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_application_data
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_context_data
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_application_data_safe
</UL>

<P><STRONG><a name="[22f]"></a>bacapp_decode_application_data</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, bacapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = bacapp_decode_application_data &rArr; bacapp_decode_data &rArr; decode_octet_string &rArr; octetstring_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Write_Property
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Write_Property
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Write_Property
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Write_Property
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Write_Property
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Write_Property
</UL>

<P><STRONG><a name="[2d2]"></a>bacapp_decode_application_data_safe</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, bacapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value_safe
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data
</UL>

<P><STRONG><a name="[2d5]"></a>bacapp_decode_data_len</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bacapp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_context_data_len
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_application_data_len
</UL>

<P><STRONG><a name="[2d4]"></a>bacapp_decode_application_data_len</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bacapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bacapp_decode_application_data_len &rArr; decode_tag_number_and_value &rArr; decode_tag_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data_len
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_data_len
</UL>

<P><STRONG><a name="[2d6]"></a>bacapp_encode_context_data_value</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, bacapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_unsigned
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_time
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_signed
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_real
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_octet_string
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_object_id
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_null
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_enumerated
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_double
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_date
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_character_string
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_boolean
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_bitstring
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_data
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data
</UL>

<P><STRONG><a name="[2e5]"></a>bacapp_context_tag_type</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, bacapp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_context_data_len
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_context_data
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data
</UL>

<P><STRONG><a name="[2e4]"></a>bacapp_encode_context_data</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bacapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_context_tag_type
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data_value
</UL>

<P><STRONG><a name="[2e6]"></a>bacapp_decode_context_data</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, bacapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_context_tag_type
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_closing_tag_number
</UL>

<P><STRONG><a name="[2e7]"></a>bacapp_decode_context_data_len</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, bacapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bacapp_decode_context_data_len &rArr; decode_tag_number_and_value &rArr; decode_tag_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_context_tag_type
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data_len
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_data_len
</UL>

<P><STRONG><a name="[2e8]"></a>bacapp_encode_data</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bacapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data_value
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_application_data
</UL>

<P><STRONG><a name="[2e9]"></a>bacapp_copy</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, bacapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octetstring_copy
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_copy_time
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_copy_date
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_copy
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_copy
</UL>

<P><STRONG><a name="[2ef]"></a>bacapp_data_len</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, bacapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bacapp_data_len &rArr; bacapp_decode_context_data_len &rArr; decode_tag_number_and_value &rArr; decode_tag_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_context_data_len
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_application_data_len
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_decode_service_request
</UL>

<P><STRONG><a name="[2f0]"></a>bacapp_parse_application_data</STRONG> (Thumb, 360 bytes, Stack size 72 bytes, bacapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_init_ansi
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_init
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octetstring_init_ascii_hex
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_set_date
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[371]"></a>encode_max_segs_max_apdu</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_encode_apdu
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcc_encode_apdu
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_encode_apdu
</UL>

<P><STRONG><a name="[2a9]"></a>decode_max_segs</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, bacdcode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_decode_confirmed_service_request
</UL>

<P><STRONG><a name="[2aa]"></a>decode_max_apdu</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, bacdcode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_decode_confirmed_service_request
</UL>

<P><STRONG><a name="[2f8]"></a>encode_tag</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = encode_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unsigned16
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unsigned32
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_octet_string
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_unsigned
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_null
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_real
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_object_id
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_enumerated
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_character_string
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_boolean
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_bitstring
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_unsigned
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_time
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_signed
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_real
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_octet_string
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_object_id
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_null
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_enumerated
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_double
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_date
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_character_string
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_boolean
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_bitstring
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_time
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_signed
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_double
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_date
</UL>

<P><STRONG><a name="[36c]"></a>encode_opening_tag</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bacdcode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_encode_apdu
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_ack_encode_apdu_init
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_datetime
</UL>

<P><STRONG><a name="[36d]"></a>encode_closing_tag</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bacdcode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_encode_apdu
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_ack_encode_apdu_object_property_end
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_datetime
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_ack_encode_apdu
</UL>

<P><STRONG><a name="[2fa]"></a>decode_tag_number</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = decode_tag_number
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_application_date
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_application_time
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag_with_length
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_opening_tag_number
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_closing_tag_number
</UL>

<P><STRONG><a name="[2fb]"></a>decode_tag_number_safe</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value_safe
</UL>

<P><STRONG><a name="[4db]"></a>decode_is_opening_tag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bacdcode.o(.text), UNUSED)

<P><STRONG><a name="[4dc]"></a>decode_is_closing_tag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bacdcode.o(.text), UNUSED)

<P><STRONG><a name="[2b2]"></a>decode_tag_number_and_value</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = decode_tag_number_and_value &rArr; decode_tag_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned32
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned16
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_application_data
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_decode_service_request
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_decode_service_request
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcc_decode_service_request
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_double
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_real
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacerror_decode_error_class_and_code
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_decode_service_request
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whois_decode_service_request
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_signed
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_enumerated
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_unsigned
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_character_string
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_octet_string
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_bitstring
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_data_len
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_context_data_len
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_context_data
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_application_data_len
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_handler
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_ack_decode_service_request
</UL>

<P><STRONG><a name="[2d3]"></a>decode_tag_number_and_value_safe</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned32
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned16
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_application_data_safe
</UL>

<P><STRONG><a name="[2fc]"></a>decode_is_context_tag</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = decode_is_context_tag &rArr; decode_tag_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_decode_service_request
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcc_decode_service_request
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_double
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_real
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_decode_service_request
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_signed
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_enumerated
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_unsigned
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_character_string
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_octet_string
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_bitstring
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_ack_decode_service_request
</UL>

<P><STRONG><a name="[2fd]"></a>decode_is_context_tag_with_length</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_date
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_bacnet_time
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_object_id
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_boolean2
</UL>

<P><STRONG><a name="[2b1]"></a>decode_is_opening_tag_number</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = decode_is_opening_tag_number &rArr; decode_tag_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_context_datetime
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_decode_service_request
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_handler
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_ack_decode_service_request
</UL>

<P><STRONG><a name="[2b4]"></a>decode_is_closing_tag_number</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = decode_is_closing_tag_number &rArr; decode_tag_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_context_datetime
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_decode_service_request
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_context_data
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_handler
</UL>

<P><STRONG><a name="[22c]"></a>encode_application_boolean</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = encode_application_boolean &rArr; encode_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Encode_Property_APDU
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Encode_Property_APDU
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_application_data
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Read_Property
</UL>

<P><STRONG><a name="[2d8]"></a>encode_context_boolean</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data_value
</UL>

<P><STRONG><a name="[4dd]"></a>decode_context_boolean</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bacdcode.o(.text), UNUSED)

<P><STRONG><a name="[2fe]"></a>decode_context_boolean2</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag_with_length
</UL>

<P><STRONG><a name="[2c7]"></a>decode_boolean</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bacdcode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data
</UL>

<P><STRONG><a name="[239]"></a>encode_application_null</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = encode_application_null &rArr; encode_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
</UL>

<P><STRONG><a name="[2d7]"></a>encode_context_null</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data_value
</UL>

<P><STRONG><a name="[2ce]"></a>decode_bitstring</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = decode_bitstring
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_init
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_set_octet
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_set_bits_used
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte_reverse_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_bitstring
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data
</UL>

<P><STRONG><a name="[302]"></a>decode_context_bitstring</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_bitstring
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
</UL>

<P><STRONG><a name="[303]"></a>encode_bitstring</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = encode_bitstring
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_octet
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_bytes_used
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_bits_used
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte_reverse_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_bitstring
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_bitstring
</UL>

<P><STRONG><a name="[22a]"></a>encode_application_bitstring</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = encode_application_bitstring &rArr; encode_bitstring
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_bytes_used
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bitstring
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Encode_Property_APDU
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Encode_Property_APDU
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Encode_Property_APDU
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_application_data
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Read_Property
</UL>

<P><STRONG><a name="[2df]"></a>encode_context_bitstring</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_bytes_used
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bitstring
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data_value
</UL>

<P><STRONG><a name="[307]"></a>decode_object_id</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = decode_object_id
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned32
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_decode_service_request
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_decode_service_request
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_decode_service_request
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_object_id
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_object_id_safe
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_ack_decode_service_request
</UL>

<P><STRONG><a name="[2d1]"></a>decode_object_id_safe</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = decode_object_id_safe &rArr; decode_object_id
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_object_id
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data
</UL>

<P><STRONG><a name="[308]"></a>decode_context_object_id</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_object_id
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag_with_length
</UL>

<P><STRONG><a name="[309]"></a>encode_bacnet_object_id</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bacdcode.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unsigned32
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_object_id
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_object_id
</UL>

<P><STRONG><a name="[2e3]"></a>encode_context_object_id</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = encode_context_object_id &rArr; encode_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_object_id
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_encode_apdu
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_ack_encode_apdu_init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data_value
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_encode_apdu
</UL>

<P><STRONG><a name="[220]"></a>encode_application_object_id</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = encode_application_object_id &rArr; encode_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_object_id
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Encode_Property_APDU
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rr_address_list_encode
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_list_encode
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Encode_Property_APDU
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Encode_Property_APDU
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_encode_apdu
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_application_data
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Read_Property
</UL>

<P><STRONG><a name="[30a]"></a>encode_octet_string</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octetstring_value
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octetstring_length
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_octet_string
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_octet_string
</UL>

<P><STRONG><a name="[24b]"></a>encode_application_octet_string</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octetstring_length
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_octet_string
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rr_address_list_encode
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_list_encode
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_application_data
</UL>

<P><STRONG><a name="[2dd]"></a>encode_context_octet_string</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octetstring_length
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_octet_string
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data_value
</UL>

<P><STRONG><a name="[2cc]"></a>decode_octet_string</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = decode_octet_string &rArr; octetstring_init
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octetstring_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data
</UL>

<P><STRONG><a name="[30d]"></a>decode_context_octet_string</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octetstring_init
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
</UL>

<P><STRONG><a name="[311]"></a>encode_bacnet_character_string_safe</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = encode_bacnet_character_string_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_character_string
</UL>

<P><STRONG><a name="[30e]"></a>encode_bacnet_character_string</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = encode_bacnet_character_string &rArr; encode_bacnet_character_string_safe
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_encoding
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_value
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_length
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_character_string_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_character_string
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_character_string
</UL>

<P><STRONG><a name="[223]"></a>encode_application_character_string</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = encode_application_character_string &rArr; encode_bacnet_character_string &rArr; encode_bacnet_character_string_safe
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_length
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_character_string
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Encode_Property_APDU
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Encode_Property_APDU
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Encode_Property_APDU
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_application_data
</UL>

<P><STRONG><a name="[2de]"></a>encode_context_character_string</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_length
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_character_string
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcc_encode_apdu
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data_value
</UL>

<P><STRONG><a name="[2cd]"></a>decode_character_string</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = decode_character_string &rArr; characterstring_init
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_init
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcc_decode_service_request
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data
</UL>

<P><STRONG><a name="[313]"></a>decode_context_character_string</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_init
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
</UL>

<P><STRONG><a name="[2c8]"></a>decode_unsigned</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = decode_unsigned
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned32
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned16
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned24
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_decode_service_request
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_decode_service_request
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcc_decode_service_request
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_decode_service_request
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whois_decode_service_request
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_unsigned
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_enumerated
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_ack_decode_service_request
</UL>

<P><STRONG><a name="[315]"></a>decode_context_unsigned</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
</UL>

<P><STRONG><a name="[316]"></a>encode_bacnet_unsigned</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, bacdcode.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unsigned16
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unsigned32
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unsigned24
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_unsigned
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_enumerated
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_unsigned
</UL>

<P><STRONG><a name="[2d9]"></a>encode_context_unsigned</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = encode_context_unsigned &rArr; encode_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_unsigned
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_encode_apdu
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_ack_encode_apdu_init
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcc_encode_apdu
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whois_encode_apdu
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data_value
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_encode_apdu
</UL>

<P><STRONG><a name="[23a]"></a>encode_application_unsigned</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = encode_application_unsigned &rArr; encode_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_unsigned
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Encode_Property_APDU
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rr_address_list_encode
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_list_encode
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_encode_apdu
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_application_data
</UL>

<P><STRONG><a name="[2b3]"></a>decode_enumerated</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = decode_enumerated &rArr; decode_unsigned
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_decode_service_request
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_decode_service_request
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcc_decode_service_request
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacerror_decode_error_class_and_code
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_decode_service_request
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_enumerated
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_handler
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_ack_decode_service_request
</UL>

<P><STRONG><a name="[318]"></a>decode_context_enumerated</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_enumerated
</UL>

<P><STRONG><a name="[319]"></a>encode_bacnet_enumerated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bacdcode.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_enumerated
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_enumerated
</UL>

<P><STRONG><a name="[225]"></a>encode_application_enumerated</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = encode_application_enumerated &rArr; encode_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_enumerated
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Encode_Property_APDU
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Encode_Property_APDU
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Encode_Property_APDU
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_encode_apdu
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacerror_encode_apdu
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_application_data
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Read_Property
</UL>

<P><STRONG><a name="[2e0]"></a>encode_context_enumerated</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = encode_context_enumerated &rArr; encode_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_enumerated
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_encode_apdu
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_ack_encode_apdu_init
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcc_encode_apdu
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data_value
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_encode_apdu
</UL>

<P><STRONG><a name="[2c9]"></a>decode_signed</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = decode_signed
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_signed32
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_signed24
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_signed16
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_signed8
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_signed
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data
</UL>

<P><STRONG><a name="[31e]"></a>decode_context_signed</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_signed
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
</UL>

<P><STRONG><a name="[31f]"></a>encode_bacnet_signed</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_signed32
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_signed24
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_signed16
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_signed8
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_signed
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_signed
</UL>

<P><STRONG><a name="[2c2]"></a>encode_application_signed</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_signed
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_application_data
</UL>

<P><STRONG><a name="[2da]"></a>encode_context_signed</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_signed
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data_value
</UL>

<P><STRONG><a name="[227]"></a>encode_application_real</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = encode_application_real &rArr; encode_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_real
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Encode_Property_APDU
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Encode_Property_APDU
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_application_data
</UL>

<P><STRONG><a name="[2db]"></a>encode_context_real</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_real
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data_value
</UL>

<P><STRONG><a name="[2c3]"></a>encode_application_double</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_double
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_application_data
</UL>

<P><STRONG><a name="[2dc]"></a>encode_context_double</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_double
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data_value
</UL>

<P><STRONG><a name="[326]"></a>encode_bacnet_time</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_time
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_time
</UL>

<P><STRONG><a name="[2c5]"></a>encode_application_time</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_time
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_datetime
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_application_data
</UL>

<P><STRONG><a name="[2e2]"></a>encode_context_time</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_time
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data_value
</UL>

<P><STRONG><a name="[327]"></a>decode_bacnet_time</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bacdcode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_bacnet_time
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_application_time
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_bacnet_time_safe
</UL>

<P><STRONG><a name="[2d0]"></a>decode_bacnet_time_safe</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bacdcode.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_bacnet_time
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data
</UL>

<P><STRONG><a name="[328]"></a>decode_application_time</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_bacnet_time
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_datetime
</UL>

<P><STRONG><a name="[329]"></a>decode_context_bacnet_time</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_bacnet_time
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag_with_length
</UL>

<P><STRONG><a name="[32a]"></a>encode_bacnet_date</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_date
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_date
</UL>

<P><STRONG><a name="[2c4]"></a>encode_application_date</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_date
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_datetime
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_application_data
</UL>

<P><STRONG><a name="[2e1]"></a>encode_context_date</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_date
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data_value
</UL>

<P><STRONG><a name="[32b]"></a>decode_date</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bacdcode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_date
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_application_date
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_date_safe
</UL>

<P><STRONG><a name="[2cf]"></a>decode_date_safe</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bacdcode.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_date
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data
</UL>

<P><STRONG><a name="[32c]"></a>decode_application_date</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_date
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_datetime
</UL>

<P><STRONG><a name="[32d]"></a>decode_context_date</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_date
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag_with_length
</UL>

<P><STRONG><a name="[338]"></a>encode_simple_ack</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bacdcode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_write_property
</UL>

<P><STRONG><a name="[228]"></a>bitstring_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bacstr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Encode_Property_APDU
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rr_address_list_encode
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Encode_Property_APDU
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Encode_Property_APDU
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_bitstring
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_parse_application_data
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Read_Property
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Encode_Value_List
</UL>

<P><STRONG><a name="[229]"></a>bitstring_set_bit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bacstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bitstring_set_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Encode_Property_APDU
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rr_address_list_encode
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Encode_Property_APDU
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Encode_Property_APDU
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Read_Property
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Encode_Value_List
</UL>

<P><STRONG><a name="[4de]"></a>bitstring_bit</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, bacstr.o(.text), UNUSED)

<P><STRONG><a name="[304]"></a>bitstring_bits_used</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bacstr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bitstring
</UL>

<P><STRONG><a name="[305]"></a>bitstring_bytes_used</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bacstr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_bitstring
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bitstring
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_bitstring
</UL>

<P><STRONG><a name="[306]"></a>bitstring_octet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bacstr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bitstring
</UL>

<P><STRONG><a name="[300]"></a>bitstring_set_octet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bacstr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_bitstring
</UL>

<P><STRONG><a name="[301]"></a>bitstring_set_bits_used</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bacstr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_bitstring
</UL>

<P><STRONG><a name="[4df]"></a>bitstring_bits_capacity</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bacstr.o(.text), UNUSED)

<P><STRONG><a name="[2ec]"></a>bitstring_copy</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bacstr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_copy
</UL>

<P><STRONG><a name="[4e0]"></a>bitstring_same</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bacstr.o(.text), UNUSED)

<P><STRONG><a name="[312]"></a>characterstring_init</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, bacstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = characterstring_init
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_init_ansi
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_character_string
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_character_string
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_copy
</UL>

<P><STRONG><a name="[222]"></a>characterstring_init_ansi</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bacstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = characterstring_init_ansi &rArr; characterstring_init
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_init
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Encode_Property_APDU
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Encode_Property_APDU
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Encode_Property_APDU
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcc_decode_service_request
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_parse_application_data
</UL>

<P><STRONG><a name="[30f]"></a>characterstring_length</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bacstr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_character_string
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_character_string
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_character_string
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_copy
</UL>

<P><STRONG><a name="[310]"></a>characterstring_value</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bacstr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_character_string
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_copy
</UL>

<P><STRONG><a name="[28b]"></a>characterstring_encoding</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bacstr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Write_Property
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_character_string
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_copy
</UL>

<P><STRONG><a name="[2eb]"></a>characterstring_copy</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, bacstr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_encoding
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_value
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_length
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_copy
</UL>

<P><STRONG><a name="[28c]"></a>characterstring_ansi_copy</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, bacstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = characterstring_ansi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Write_Property
</UL>

<P><STRONG><a name="[4e1]"></a>characterstring_same</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bacstr.o(.text), UNUSED)

<P><STRONG><a name="[32f]"></a>characterstring_ansi_same</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bacstr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[4e2]"></a>characterstring_append</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bacstr.o(.text), UNUSED)

<P><STRONG><a name="[4e3]"></a>characterstring_truncate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bacstr.o(.text), UNUSED)

<P><STRONG><a name="[4e4]"></a>characterstring_capacity</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bacstr.o(.text), UNUSED)

<P><STRONG><a name="[4e5]"></a>characterstring_set_encoding</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bacstr.o(.text), UNUSED)

<P><STRONG><a name="[4e6]"></a>characterstring_printable</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, bacstr.o(.text), UNUSED)

<P><STRONG><a name="[331]"></a>utf8_isvalid</STRONG> (Thumb, 182 bytes, Stack size 20 bytes, bacstr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_valid
</UL>

<P><STRONG><a name="[330]"></a>characterstring_valid</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bacstr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_isvalid
</UL>

<P><STRONG><a name="[24a]"></a>octetstring_init</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, bacstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = octetstring_init
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rr_address_list_encode
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_list_encode
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_octet_string
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octetstring_copy
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_octet_string
</UL>

<P><STRONG><a name="[2f5]"></a>octetstring_init_ascii_hex</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, bacstr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_parse_application_data
</UL>

<P><STRONG><a name="[30b]"></a>octetstring_length</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bacstr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_octet_string
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_octet_string
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octetstring_copy
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_octet_string
</UL>

<P><STRONG><a name="[30c]"></a>octetstring_value</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bacstr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_octet_string
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octetstring_copy
</UL>

<P><STRONG><a name="[2ea]"></a>octetstring_copy</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bacstr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octetstring_init
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octetstring_value
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octetstring_length
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_copy
</UL>

<P><STRONG><a name="[4e7]"></a>octetstring_copy_value</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bacstr.o(.text), UNUSED)

<P><STRONG><a name="[4e8]"></a>octetstring_append</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bacstr.o(.text), UNUSED)

<P><STRONG><a name="[4e9]"></a>octetstring_truncate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bacstr.o(.text), UNUSED)

<P><STRONG><a name="[4ea]"></a>octetstring_capacity</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bacstr.o(.text), UNUSED)

<P><STRONG><a name="[4eb]"></a>octetstring_value_same</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, bacstr.o(.text), UNUSED)

<P><STRONG><a name="[291]"></a>CRC_Calc_Header</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, crc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Receive_Frame_FSM
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Send_Frame
</UL>

<P><STRONG><a name="[292]"></a>CRC_Calc_Data</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, crc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Receive_Frame_FSM
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Send_Frame
</UL>

<P><STRONG><a name="[2ae]"></a>handler_who_is</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, h_whois.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = handler_who_is &rArr; whois_decode_service_request &rArr; decode_tag_number_and_value &rArr; decode_tag_number
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_Instance_Number
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whois_decode_service_request
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_handler
</UL>

<P><STRONG><a name="[2ad]"></a>handler_write_property</STRONG> (Thumb, 438 bytes, Stack size 72 bytes, h_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = handler_write_property &rArr; Analog_Output_Write_Property &rArr; Analog_Output_Present_Value_Set &rArr; wirte_bacnet_value_to_buf &rArr; tapdev_init &rArr; ENC28J60_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Write_Property
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_get_my_address
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_send_pdu
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Write_Property
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Write_Property
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Write_Property
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Write_Property
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_decode_service_request
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_encode_pdu
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_encode_npdu_data
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacerror_encode_apdu
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_encode_apdu
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_simple_ack
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Write_Property
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_handler
</UL>

<P><STRONG><a name="[23c]"></a>WPValidateArgType</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, h_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WPValidateArgType
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Write_Property
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Write_Property
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Write_Property
</UL>

<P><STRONG><a name="[4ec]"></a>npdu_copy_data</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, npdu.o(.text), UNUSED)

<P><STRONG><a name="[336]"></a>npdu_encode_pdu</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, npdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = npdu_encode_pdu
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unsigned16
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs_To_Network
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_unicast_encode_pdu
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_write_property
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_unrecognized_service
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_read_property
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_encode_pdu
</UL>

<P><STRONG><a name="[335]"></a>npdu_encode_npdu_data</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, npdu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs_To_Network
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_unicast_encode_pdu
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_write_property
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_unrecognized_service
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_read_property
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_encode_pdu
</UL>

<P><STRONG><a name="[2a4]"></a>npdu_decode</STRONG> (Thumb, 358 bytes, Stack size 48 bytes, npdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = npdu_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned16
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_handler
</UL>

<P><STRONG><a name="[28e]"></a>iam_encode_pdu</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, s_iam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = iam_encode_pdu &rArr; iam_encode_apdu &rArr; encode_application_unsigned &rArr; encode_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Vendor_Identifier
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_Instance_Number
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_get_my_address
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_get_broadcast_address
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_encode_apdu
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_encode_pdu
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_encode_npdu_data
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlmstp_encode_unconfirmed_frame
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_I_Am
</UL>

<P><STRONG><a name="[2af]"></a>Send_I_Am</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, s_iam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Send_I_Am &rArr; iam_encode_pdu &rArr; iam_encode_apdu &rArr; encode_application_unsigned &rArr; encode_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_send_pdu
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_encode_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_handler
</UL>

<P><STRONG><a name="[33b]"></a>iam_unicast_encode_pdu</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, s_iam.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Vendor_Identifier
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_Instance_Number
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_get_my_address
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_encode_apdu
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_encode_pdu
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_encode_npdu_data
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacnet_address_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_I_Am_Unicast
</UL>

<P><STRONG><a name="[33d]"></a>Send_I_Am_Unicast</STRONG> (Thumb, 36 bytes, Stack size 48 bytes, s_iam.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_send_pdu
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_unicast_encode_pdu
</UL>

<P><STRONG><a name="[33e]"></a>Send_WhoIs_To_Network</STRONG> (Thumb, 88 bytes, Stack size 64 bytes, s_whois.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Send_WhoIs_To_Network &rArr; datalink_send_pdu &rArr; bip_send_pdu &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_get_my_address
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_send_pdu
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whois_encode_apdu
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_encode_pdu
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_encode_npdu_data
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs_Remote
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs_Local
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs_Global
</UL>

<P><STRONG><a name="[340]"></a>Send_WhoIs_Global</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, s_whois.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Send_WhoIs_Global &rArr; Send_WhoIs_To_Network &rArr; datalink_send_pdu &rArr; bip_send_pdu &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_get_broadcast_address
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs_To_Network
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs
</UL>

<P><STRONG><a name="[341]"></a>Send_WhoIs_Local</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, s_whois.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_get_broadcast_address
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcc_communication_enabled
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs_To_Network
</UL>

<P><STRONG><a name="[343]"></a>Send_WhoIs_Remote</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, s_whois.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcc_communication_enabled
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs_To_Network
</UL>

<P><STRONG><a name="[28f]"></a>Send_WhoIs</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, s_whois.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Send_WhoIs &rArr; Send_WhoIs_Global &rArr; Send_WhoIs_To_Network &rArr; datalink_send_pdu &rArr; bip_send_pdu &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs_Global
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlmstp_encode_unconfirmed_frame
</UL>

<P><STRONG><a name="[4ed]"></a>abort_convert_error_code</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, abort.o(.text), UNUSED)

<P><STRONG><a name="[337]"></a>abort_encode_apdu</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = abort_encode_apdu
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_write_property
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_read_property
</UL>

<P><STRONG><a name="[4ee]"></a>abort_decode_service_request</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, abort.o(.text), UNUSED)

<P><STRONG><a name="[339]"></a>bacerror_encode_apdu</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bacerror.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bacerror_encode_apdu &rArr; encode_application_enumerated &rArr; encode_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_enumerated
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_write_property
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_read_property
</UL>

<P><STRONG><a name="[344]"></a>bacerror_decode_error_class_and_code</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, bacerror.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_enumerated
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacerror_decode_service_request
</UL>

<P><STRONG><a name="[345]"></a>bacerror_decode_service_request</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bacerror.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacerror_decode_error_class_and_code
</UL>

<P><STRONG><a name="[346]"></a>decode_real</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bacreal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = decode_real
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_real
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_real_safe
</UL>

<P><STRONG><a name="[2ca]"></a>decode_real_safe</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bacreal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = decode_real_safe &rArr; decode_real
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_real
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data
</UL>

<P><STRONG><a name="[347]"></a>decode_context_real</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, bacreal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_real
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
</UL>

<P><STRONG><a name="[324]"></a>encode_bacnet_real</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bacreal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = encode_bacnet_real
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_real
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_real
</UL>

<P><STRONG><a name="[348]"></a>decode_double</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bacreal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = decode_double
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_double
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_double_safe
</UL>

<P><STRONG><a name="[2cb]"></a>decode_double_safe</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bacreal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = decode_double_safe &rArr; decode_double
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_double
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data
</UL>

<P><STRONG><a name="[325]"></a>encode_bacnet_double</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bacreal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_double
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_double
</UL>

<P><STRONG><a name="[349]"></a>decode_context_double</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, bacreal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_double
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
</UL>

<P><STRONG><a name="[34b]"></a>datetime_is_leap_year</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_month_days
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;days_since_epoch_into_ymd
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;days_since_epoch
</UL>

<P><STRONG><a name="[34a]"></a>datetime_month_days</STRONG> (Thumb, 52 bytes, Stack size 64 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_is_leap_year
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_ymd_is_valid
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;days_since_epoch_into_ymd
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;day_of_year_into_md
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;day_of_year
</UL>

<P><STRONG><a name="[34c]"></a>datetime_ymd_is_valid</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_month_days
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_date_is_valid
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;days_since_epoch
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;day_of_year
</UL>

<P><STRONG><a name="[34d]"></a>datetime_date_is_valid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_ymd_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_is_valid
</UL>

<P><STRONG><a name="[351]"></a>datetime_day_of_week</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;days_since_epoch
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_set_values
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_set_date
</UL>

<P><STRONG><a name="[2f7]"></a>datetime_set_date</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_day_of_week
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_days_since_epoch_into_date
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_day_of_year_into_date
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_parse_application_data
</UL>

<P><STRONG><a name="[352]"></a>datetime_day_of_year_into_date</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;day_of_year_into_md
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_set_date
</UL>

<P><STRONG><a name="[353]"></a>datetime_day_of_year</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;day_of_year
</UL>

<P><STRONG><a name="[354]"></a>datetime_days_since_epoch</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;days_since_epoch
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_add_minutes
</UL>

<P><STRONG><a name="[356]"></a>datetime_days_since_epoch_into_date</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;days_since_epoch_into_ymd
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_set_date
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_add_minutes
</UL>

<P><STRONG><a name="[358]"></a>datetime_time_is_valid</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_is_valid
</UL>

<P><STRONG><a name="[357]"></a>datetime_is_valid</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_time_is_valid
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_date_is_valid
</UL>

<P><STRONG><a name="[35a]"></a>datetime_compare_date</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_compare
</UL>

<P><STRONG><a name="[35b]"></a>datetime_compare_time</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_compare
</UL>

<P><STRONG><a name="[359]"></a>datetime_compare</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_compare_time
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_compare_date
</UL>

<P><STRONG><a name="[35d]"></a>datetime_wildcard_compare_date</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_wildcard_compare
</UL>

<P><STRONG><a name="[35e]"></a>datetime_wildcard_compare_time</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_wildcard_compare
</UL>

<P><STRONG><a name="[35c]"></a>datetime_wildcard_compare</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_wildcard_compare_time
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_wildcard_compare_date
</UL>

<P><STRONG><a name="[2ed]"></a>datetime_copy_date</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_copy
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_copy
</UL>

<P><STRONG><a name="[2ee]"></a>datetime_copy_time</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_copy
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_copy
</UL>

<P><STRONG><a name="[35f]"></a>datetime_copy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_copy_time
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_copy_date
</UL>

<P><STRONG><a name="[4ef]"></a>datetime_set_time</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, datetime.o(.text), UNUSED)

<P><STRONG><a name="[4f0]"></a>datetime_set</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, datetime.o(.text), UNUSED)

<P><STRONG><a name="[360]"></a>datetime_set_values</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_day_of_week
</UL>

<P><STRONG><a name="[361]"></a>datetime_seconds_since_midnight</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seconds_since_midnight
</UL>

<P><STRONG><a name="[363]"></a>datetime_minutes_since_midnight</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minutes_since_midnight
</UL>

<P><STRONG><a name="[365]"></a>datetime_add_minutes</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_days_since_epoch_into_date
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_days_since_epoch
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seconds_since_midnight_into_hms
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seconds_since_midnight
</UL>

<P><STRONG><a name="[4f1]"></a>datetime_wildcard</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, datetime.o(.text), UNUSED)

<P><STRONG><a name="[4f2]"></a>datetime_wildcard_present</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, datetime.o(.text), UNUSED)

<P><STRONG><a name="[368]"></a>datetime_date_wildcard_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_wildcard_set
</UL>

<P><STRONG><a name="[369]"></a>datetime_time_wildcard_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_wildcard_set
</UL>

<P><STRONG><a name="[367]"></a>datetime_wildcard_set</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_time_wildcard_set
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_date_wildcard_set
</UL>

<P><STRONG><a name="[36a]"></a>bacapp_encode_datetime</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_time
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_date
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_datetime
</UL>

<P><STRONG><a name="[36b]"></a>bacapp_encode_context_datetime</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_datetime
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_closing_tag
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_opening_tag
</UL>

<P><STRONG><a name="[36e]"></a>bacapp_decode_datetime</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_application_date
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_application_time
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_context_datetime
</UL>

<P><STRONG><a name="[36f]"></a>bacapp_decode_context_datetime</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_datetime
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_opening_tag_number
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_closing_tag_number
</UL>

<P><STRONG><a name="[4f3]"></a>dcc_enable_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dcc.o(.text), UNUSED)

<P><STRONG><a name="[342]"></a>dcc_communication_enabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs_Remote
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs_Local
</UL>

<P><STRONG><a name="[4f4]"></a>dcc_communication_disabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dcc.o(.text), UNUSED)

<P><STRONG><a name="[4f5]"></a>dcc_communication_initiation_disabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dcc.o(.text), UNUSED)

<P><STRONG><a name="[4f6]"></a>dcc_duration_seconds</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dcc.o(.text), UNUSED)

<P><STRONG><a name="[4f7]"></a>dcc_timer_seconds</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dcc.o(.text), UNUSED)

<P><STRONG><a name="[4f8]"></a>dcc_set_status_duration</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dcc.o(.text), UNUSED)

<P><STRONG><a name="[370]"></a>dcc_encode_apdu</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_max_segs_max_apdu
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_unsigned
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_enumerated
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_character_string
</UL>

<P><STRONG><a name="[372]"></a>dcc_decode_service_request</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, dcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_init_ansi
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_character_string
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_enumerated
</UL>

<P><STRONG><a name="[2b0]"></a>handler_i_am_add</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, h_iam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = handler_i_am_add &rArr; iam_decode_service_request &rArr; decode_tag_number_and_value &rArr; decode_tag_number
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_add
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_decode_service_request
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_handler
</UL>

<P><STRONG><a name="[374]"></a>handler_i_am_bind</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, h_iam.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_add_binding
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_decode_service_request
</UL>

<P><STRONG><a name="[375]"></a>Encode_Property_APDU</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, h_rp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = Encode_Property_APDU &rArr; Device_Encode_Property_APDU &rArr; encode_application_character_string &rArr; encode_bacnet_character_string &rArr; encode_bacnet_character_string_safe
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Encode_Property_APDU
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Valid_Object_Instance_Number
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_Instance_Number
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Valid_Instance
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Encode_Property_APDU
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Valid_Instance
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Valid_Instance
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Encode_Property_APDU
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Valid_Instance
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Read_Property
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Valid_Instance
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_read_property
</UL>

<P><STRONG><a name="[2ac]"></a>handler_read_property</STRONG> (Thumb, 236 bytes, Stack size 112 bytes, h_rp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = handler_read_property &rArr; Encode_Property_APDU &rArr; Device_Encode_Property_APDU &rArr; encode_application_character_string &rArr; encode_bacnet_character_string &rArr; encode_bacnet_character_string_safe
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_get_my_address
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_send_pdu
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_decode_service_request
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_ack_encode_apdu_object_property_end
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_ack_encode_apdu_init
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_Property_APDU
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_encode_pdu
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_encode_npdu_data
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacerror_encode_apdu
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_encode_apdu
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_handler
</UL>

<P><STRONG><a name="[33a]"></a>iam_encode_apdu</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, iam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = iam_encode_apdu &rArr; encode_application_unsigned &rArr; encode_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_unsigned
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_object_id
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_enumerated
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_unicast_encode_pdu
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_encode_pdu
</UL>

<P><STRONG><a name="[373]"></a>iam_decode_service_request</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, iam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = iam_decode_service_request &rArr; decode_tag_number_and_value &rArr; decode_tag_number
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_object_id
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_enumerated
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_i_am_bind
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_i_am_add
</UL>

<P><STRONG><a name="[2ab]"></a>handler_unrecognized_service</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, noserv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = handler_unrecognized_service &rArr; datalink_send_pdu &rArr; bip_send_pdu &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_get_my_address
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_send_pdu
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reject_encode_apdu
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_encode_pdu
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_encode_npdu_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_handler
</UL>

<P><STRONG><a name="[33f]"></a>whois_encode_apdu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, whois.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = whois_encode_apdu &rArr; encode_context_unsigned &rArr; encode_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs_To_Network
</UL>

<P><STRONG><a name="[332]"></a>whois_decode_service_request</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, whois.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = whois_decode_service_request &rArr; decode_tag_number_and_value &rArr; decode_tag_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_who_is
</UL>

<P><STRONG><a name="[37e]"></a>wp_encode_apdu</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, wp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_closing_tag
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_opening_tag
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_max_segs_max_apdu
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_unsigned
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_object_id
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_enumerated
</UL>

<P><STRONG><a name="[334]"></a>wp_decode_service_request</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = wp_decode_service_request &rArr; bacapp_data_len &rArr; bacapp_decode_context_data_len &rArr; decode_tag_number_and_value &rArr; decode_tag_number
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_object_id
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_data_len
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_opening_tag_number
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_closing_tag_number
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_enumerated
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_write_property
</UL>

<P><STRONG><a name="[4f9]"></a>reject_convert_error_code</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, reject.o(.text), UNUSED)

<P><STRONG><a name="[37d]"></a>reject_encode_apdu</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, reject.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_unrecognized_service
</UL>

<P><STRONG><a name="[4fa]"></a>reject_decode_service_request</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, reject.o(.text), UNUSED)

<P><STRONG><a name="[37f]"></a>rp_encode_apdu</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, rp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_max_segs_max_apdu
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_unsigned
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_object_id
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_enumerated
</UL>

<P><STRONG><a name="[37a]"></a>rp_decode_service_request</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, rp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rp_decode_service_request &rArr; decode_tag_number_and_value &rArr; decode_tag_number
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_object_id
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_enumerated
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_read_property
</UL>

<P><STRONG><a name="[37b]"></a>rp_ack_encode_apdu_init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, rp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rp_ack_encode_apdu_init &rArr; encode_context_object_id &rArr; encode_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_opening_tag
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_unsigned
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_object_id
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_enumerated
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_read_property
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_ack_encode_apdu
</UL>

<P><STRONG><a name="[37c]"></a>rp_ack_encode_apdu_object_property_end</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_closing_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_read_property
</UL>

<P><STRONG><a name="[380]"></a>rp_ack_encode_apdu</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_ack_encode_apdu_init
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_closing_tag
</UL>

<P><STRONG><a name="[381]"></a>rp_ack_decode_service_request</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, rp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_object_id
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_opening_tag_number
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_enumerated
</UL>

<P><STRONG><a name="[a7]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNETTask
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPrint
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_found
</UL>

<P><STRONG><a name="[1f1]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_flash_init
</UL>

<P><STRONG><a name="[395]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[5f]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[385]"></a>__printf</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, __printf_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[2f6]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_parse_application_data
</UL>

<P><STRONG><a name="[389]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[2f1]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_parse_application_data
</UL>

<P><STRONG><a name="[2f2]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_parse_application_data
</UL>

<P><STRONG><a name="[1c9]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkData
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[64]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[19c]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
</UL>

<P><STRONG><a name="[1a8]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_query
</UL>

<P><STRONG><a name="[32e]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_init_ansi
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_ansi_same
</UL>

<P><STRONG><a name="[189]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseCmd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_flash_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internalDeal
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Object_Name
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Mass
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_msg
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_appcall
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_interruptHandler
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_send_pdu
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacnet_description_to_buf
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_bacnet_APP
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_SCAN_APP
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_scan_reply
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Send_Frame
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlmstp_send_pdu
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_pdu
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_get_by_index
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_add_binding
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_bind_request
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_add
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_get_by_device
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Send_Data
</UL>

<P><STRONG><a name="[38e]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[4fb]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseCmd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_flash_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_initialize
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_month_days
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[4fc]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[4fd]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[4fe]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_out
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
</UL>

<P><STRONG><a name="[193]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_msg
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_send_pdu
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_scan_reply
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_handler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[390]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[38f]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1f2]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_handler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_flash_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_intial
</UL>

<P><STRONG><a name="[4ff]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[500]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[391]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[14a]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
</UL>

<P><STRONG><a name="[1aa]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_lookup
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[501]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[502]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[503]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[504]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[505]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[38b]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[38d]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[506]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[507]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[392]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[393]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[384]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[383]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[52]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[394]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[396]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[62]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[382]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[38a]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[388]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[53]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[38c]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[39b]"></a>__strtod_int</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, strtod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>

<P><STRONG><a name="[508]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[39f]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[509]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[59]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scanf_char.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[398]"></a>__vfscanf</STRONG> (Thumb, 878 bytes, Stack size 96 bytes, _scanf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[39c]"></a>_btod_etento</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, bigflt0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[397]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[6b]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[3a4]"></a>_scanf_really_real</STRONG> (Thumb, 668 bytes, Stack size 120 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>

<P><STRONG><a name="[70]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[3a9]"></a>_scanf_really_hex_real</STRONG> (Thumb, 778 bytes, Stack size 80 bytes, scanf_hexfp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>

<P><STRONG><a name="[3d5]"></a>_scanf_really_infnan</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, scanf_infnan.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
</UL>

<P><STRONG><a name="[3aa]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[50a]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3ae]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[3ac]"></a>_e2d</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, btod.o(CL$$btod_e2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[3ad]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>

<P><STRONG><a name="[39e]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[3a3]"></a>_btod_edivd</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_edivd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[39d]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[3a2]"></a>_btod_emuld</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emuld), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[3af]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[3b0]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[3b2]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[3a7]"></a>__mathlib_narrow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[3b3]"></a>__mathlib_tofloat</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, narrow.o(i.__mathlib_tofloat), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[3ab]"></a>__support_ldexp</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[386]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[3b4]"></a>frexp</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, frexp.o(i.frexp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[3b7]"></a>ldexp</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ldexp.o(i.ldexp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[13a]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_count
</UL>

<P><STRONG><a name="[2f3]"></a>strtod</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, strtod.o(i.strtod), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_parse_application_data
</UL>

<P><STRONG><a name="[55]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[2f4]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_parse_application_data
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[3b9]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[3bc]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[3c1]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[204]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setFrequency
</UL>

<P><STRONG><a name="[3be]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[3b5]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[3c0]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[13b]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_count
</UL>

<P><STRONG><a name="[3c2]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[205]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setFrequency
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_getFrequency
</UL>

<P><STRONG><a name="[3c3]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[139]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_count
</UL>

<P><STRONG><a name="[50b]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[203]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setFrequency
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_getFrequency
</UL>

<P><STRONG><a name="[50c]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[50d]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[3c4]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[3c7]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[208]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_getFrequency
</UL>

<P><STRONG><a name="[3c5]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[3bb]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[3bf]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[3b6]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[3c6]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[3b8]"></a>_dsqrt</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[50e]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)

<P><STRONG><a name="[3c8]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[3cd]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[1d0]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_bacnet_value_from_buf
</UL>

<P><STRONG><a name="[3cb]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1d7]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_bacnet_value_to_buf
</UL>

<P><STRONG><a name="[3cc]"></a>_fcmpeq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[1d6]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_bacnet_value_to_buf
</UL>

<P><STRONG><a name="[3ce]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1d2]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_bacnet_value_to_buf
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Present_Value
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Read_Property
</UL>

<P><STRONG><a name="[3cf]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1cf]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_bacnet_value_from_buf
</UL>

<P><STRONG><a name="[50f]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[1ce]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_bacnet_value_from_buf
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Write_Property
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Present_Value_Set
</UL>

<P><STRONG><a name="[510]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[1d3]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_bacnet_value_to_buf
</UL>

<P><STRONG><a name="[3d0]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[511]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[1d5]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_bacnet_value_to_buf
</UL>

<P><STRONG><a name="[3d1]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[3ca]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[3ba]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[1d4]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_bacnet_value_to_buf
</UL>

<P><STRONG><a name="[3d2]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[3bd]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[3b1]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>

<P><STRONG><a name="[39a]"></a>_scanf_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf1.o(x$fpl$scanf1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[3a6]"></a>_scanf_hex_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[3a5]"></a>_scanf_infnan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[3d4]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[76]"></a>debug_config</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = debug_config &rArr; GPIO_PinRemapConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e]"></a>vMSTP_TASK</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = vMSTP_TASK &rArr; npdu_handler &rArr; apdu_handler &rArr; handler_write_property &rArr; Analog_Output_Write_Property &rArr; Analog_Output_Present_Value_Set &rArr; wirte_bacnet_value_to_buf &rArr; tapdev_init &rArr; ENC28J60_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_handler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlmstp_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_receive
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recievebuf_Initialize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inital_Bacnet_Server
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[4d]"></a>vNETTask</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
<LI>Call Chain = vNETTask &rArr; uip_polling &rArr; uip_process &rArr; udp_appcall &rArr; UDP_bacnet_APP &rArr; npdu_handler &rArr; apdu_handler &rArr; handler_write_property &rArr; Analog_Output_Write_Property &rArr; Analog_Output_Present_Value_Set &rArr; wirte_bacnet_value_to_buf &rArr; tapdev_init &rArr; ENC28J60_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftReset
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>vCOMMTask</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = vCOMMTask &rArr; dealwithData &rArr; responseCmd &rArr; ACCELERO_Read_Data &rArr; ACCELERO_I2C_read_byte &rArr; ACCELERO_I2C_NAck &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_restart
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealwithData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[4b]"></a>vLED0Task</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vLED0Task &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabulate_LED_STATE
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>vINPUTSTask</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vINPUTSTask &rArr; Flash_Write_Mass &rArr; iap_write_appbin &rArr; STMFLASH_Write_NoCheck &rArr; STMFLASH_WriteHalfWord &rArr; STMFLASH_WaitDone &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetInterruptMask
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputs_scan
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputs_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_input
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Mass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[cb]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[df]"></a>TI4_Config</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[dd]"></a>TI3_Config</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[db]"></a>TI2_Config</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[d9]"></a>TI1_Config</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[146]"></a>key_analyse</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = key_analyse
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Status_Scan
</UL>

<P><STRONG><a name="[147]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[149]"></a>prvInitialiseTCBVariables</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInitialiseTCBVariables &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[14c]"></a>prvAllocateTCBAndStack</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[159]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
</UL>

<P><STRONG><a name="[164]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[165]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[51]"></a>prvIdleTask</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[171]"></a>usTaskCheckFreeStackSpace</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
</UL>

<P><STRONG><a name="[172]"></a>prvSetupTimerInterrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[17c]"></a>chksum</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ipchksum
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_chksum
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>

<P><STRONG><a name="[17e]"></a>upper_layer_chksum</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udpchksum
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_tcpchksum
</UL>

<P><STRONG><a name="[183]"></a>uip_add_rcv_nxt</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uip_add_rcv_nxt
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add32
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[18a]"></a>uip_arp_update</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, uip_arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uip_arp_update
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_arpin
</UL>

<P><STRONG><a name="[195]"></a>add_msg_type</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dhcpc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_request
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_discover
</UL>

<P><STRONG><a name="[199]"></a>add_server_id</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dhcpc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_request
</UL>

<P><STRONG><a name="[19a]"></a>add_req_ipaddr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dhcpc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_request
</UL>

<P><STRONG><a name="[196]"></a>add_req_options</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dhcpc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_discover
</UL>

<P><STRONG><a name="[197]"></a>add_end</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dhcpc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_request
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_discover
</UL>

<P><STRONG><a name="[192]"></a>create_msg</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, dhcpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = create_msg
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_request
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_discover
</UL>

<P><STRONG><a name="[194]"></a>send_discover</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dhcpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = send_discover &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_msg
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_end
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_req_options
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_msg_type
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp
</UL>

<P><STRONG><a name="[198]"></a>send_request</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dhcpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = send_request &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_msg
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_end
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_req_ipaddr
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_server_id
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_msg_type
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp
</UL>

<P><STRONG><a name="[19d]"></a>parse_options</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, dhcpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = parse_options
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
</UL>

<P><STRONG><a name="[19b]"></a>parse_msg</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, dhcpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = parse_msg &rArr; parse_options
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_options
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp
</UL>

<P><STRONG><a name="[19e]"></a>handle_dhcp</STRONG> (Thumb, 508 bytes, Stack size 8 bytes, dhcpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = handle_dhcp &rArr; send_request &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpc_configured
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dhcpc_DeInit
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_request
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpc_appcall
</UL>

<P><STRONG><a name="[1a5]"></a>parse_name</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, resolv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newdata
</UL>

<P><STRONG><a name="[1a3]"></a>check_entries</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = check_entries &rArr; resolv_found &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_found
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_appcall
</UL>

<P><STRONG><a name="[1a4]"></a>newdata</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = newdata &rArr; resolv_found &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_found
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_name
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_appcall
</UL>

<P><STRONG><a name="[1cb]"></a>initSend_COM</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, modbus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealwithData
</UL>

<P><STRONG><a name="[1dd]"></a>bip_decode_bip_address</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bip_decode_bip_address
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_send_pdu
</UL>

<P><STRONG><a name="[20d]"></a>RFM69_sendFrame</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, rfm69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RFM69_sendFrame &rArr; RFM69_getFrequency &rArr; RFM69_readReg &rArr; SPI_transfer8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_setMode
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_ReadDIO0Pin
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timeout_SetTimeout1
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timeout_IsTimeout1
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_writeReg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_readReg
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_transfer8
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_unselect
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_select
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_getFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_sendACK
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFM69_send
</UL>

<P><STRONG><a name="[245]"></a>address_remove_oldest</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, address.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = address_remove_oldest
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_bind_request
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_add
</UL>

<P><STRONG><a name="[254]"></a>bvlc_encode_bip_address</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_read_fdt_ack
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_forwarded_npdu
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_address_entry
</UL>

<P><STRONG><a name="[253]"></a>bvlc_encode_address_entry</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_bip_address
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_read_bdt_ack
</UL>

<P><STRONG><a name="[255]"></a>bvlc_encode_bvlc_result</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unsigned16
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_result
</UL>

<P><STRONG><a name="[25a]"></a>bvlc_encode_read_bdt_ack_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unsigned16
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_read_bdt_ack
</UL>

<P><STRONG><a name="[25b]"></a>bvlc_encode_read_bdt_ack</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_read_bdt_ack_init
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_address_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_bdt
</UL>

<P><STRONG><a name="[25c]"></a>bvlc_encode_forwarded_npdu</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unsigned16
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_bip_address
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_fdt_forward_npdu
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_forward_npdu
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_bdt_forward_npdu
</UL>

<P><STRONG><a name="[25d]"></a>bvlc_encode_read_fdt_ack_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unsigned16
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_read_fdt_ack
</UL>

<P><STRONG><a name="[25e]"></a>bvlc_encode_read_fdt_ack</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unsigned16
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_read_fdt_ack_init
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_bip_address
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_fdt
</UL>

<P><STRONG><a name="[25f]"></a>bvlc_delete_foreign_device</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_decode_bip_address
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
</UL>

<P><STRONG><a name="[26d]"></a>bvlc_encode_register_foreign_device</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unsigned16
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_register_with_bbmd
</UL>

<P><STRONG><a name="[28d]"></a>dlmstp_encode_unconfirmed_frame</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, dlmstp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dlmstp_encode_unconfirmed_frame &rArr; Send_WhoIs &rArr; Send_WhoIs_Global &rArr; Send_WhoIs_To_Network &rArr; datalink_send_pdu &rArr; bip_send_pdu &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_encode_pdu
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Master_Node_FSM
</UL>

<P><STRONG><a name="[290]"></a>MSTP_Send_Frame</STRONG> (Thumb, 198 bytes, Stack size 640 bytes, dlmstp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = MSTP_Send_Frame &rArr; RS485_Send_Data &rArr; USART_SendDataString &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Turnaround_Delay
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Transmitter_Enable
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Send_Data
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Calc_Header
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Calc_Data
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Master_Node_FSM
</UL>

<P><STRONG><a name="[29a]"></a>MSTP_Master_Node_FSM</STRONG> (Thumb, 1252 bytes, Stack size 56 bytes, dlmstp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = MSTP_Master_Node_FSM &rArr; MSTP_Send_Frame &rArr; RS485_Send_Data &rArr; USART_SendDataString &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Silence_Reset
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Send_Frame
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlmstp_encode_unconfirmed_frame
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Silence
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlmstp_receive
</UL>

<P><STRONG><a name="[2bc]"></a>Binary_Input_Out_Of_Service_Set</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Binary_Input_Out_Of_Service_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Instance_To_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Write_Property
</UL>

<P><STRONG><a name="[2ff]"></a>byte_reverse_bits</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, bacdcode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bitstring
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_bitstring
</UL>

<P><STRONG><a name="[34e]"></a>day_of_year</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_ymd_is_valid
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_month_days
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_day_of_year
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;days_since_epoch
</UL>

<P><STRONG><a name="[34f]"></a>day_of_year_into_md</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_month_days
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_day_of_year_into_date
</UL>

<P><STRONG><a name="[350]"></a>days_since_epoch</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_ymd_is_valid
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_is_leap_year
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;day_of_year
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_days_since_epoch
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_day_of_week
</UL>

<P><STRONG><a name="[355]"></a>days_since_epoch_into_ymd</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_month_days
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_is_leap_year
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_days_since_epoch_into_date
</UL>

<P><STRONG><a name="[362]"></a>seconds_since_midnight</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_add_minutes
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_seconds_since_midnight
</UL>

<P><STRONG><a name="[364]"></a>minutes_since_midnight</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_minutes_since_midnight
</UL>

<P><STRONG><a name="[366]"></a>seconds_since_midnight_into_hms</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_add_minutes
</UL>

<P><STRONG><a name="[3d3]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[3c9]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[56]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[58]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[399]"></a>_local_sscanf</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, strtod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[3a1]"></a>_fp_value</STRONG> (Thumb, 508 bytes, Stack size 88 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
